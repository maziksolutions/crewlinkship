@model crewlinkship.ViewModel.PortageViewModel
@{
    ViewBag.Title = "sdf";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .tbl-container {
        max-width: fit-content;
        max-height: fit-content;
    }

    .tbl-fixed {
        overflow-x: scroll;
        overflow-y: scroll;
        height: fit-content;
        max-height: 70vh;
    }

    .tbl table {
        max-width: max-content;
    }

    .tbl th {
        position: sticky;
        top: 0px;
        background: #ffffff;
        z-index: 2;
    }

    .tbl td {
        background: #fff;
    }

        .tbl td:first-child,
        .tbl th:first-child {
            position: sticky;
            left: 0;
            z-index: 4;
        }

        .tbl td:nth-child(2),
        .tbl th:nth-child(2) {
            position: sticky;
            left: 49px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(2) {
            z-index: 3;
        }

        .tbl td:nth-child(3),
        .tbl th:nth-child(3) {
            position: sticky;
            left: 98px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(3) {
            z-index: 3;
        }


        .tbl td:nth-child(4),
        .tbl th:nth-child(4) {
            position: sticky;
            left: 197px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(4) {
            z-index: 3;
        }


        .tbl td:nth-child(5),
        .tbl th:nth-child(5) {
            position: sticky;
            left: 296px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(5) {
            z-index: 3;
        }

        .tbl td:nth-child(6),
        .tbl th:nth-child(6) {
            position: sticky;
            left: 355px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(6) {
            z-index: 3;
        }

        .tbl td:nth-child(7),
        .tbl th:nth-child(7) {
            position: sticky;
            left: 454px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(7) {
            z-index: 3;
        }

        .tbl td:nth-child(8),
        .tbl th:nth-child(8) {
            position: sticky;
            left: 553px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(8) {
            z-index: 3;
        }

        .tbl td:nth-child(9),
        .tbl th:nth-child(9) {
            position: sticky;
            left: 634px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(9) {
            z-index: 3;
        }

        .tbl td:nth-child(10),
        .tbl th:nth-child(10) {
            position: sticky;
            left: 726px;
            z-index: 1;
        }

        .tbl td:first-child,
        .tbl th:nth-child(10) {
            z-index: 3;
        }


    .tabs {
        width: 100%;
        height: auto;
        margin: 0 auto;
    }
        /* tab list item */
        .tabs .tabs-list {
            list-style: none;
            margin: 0px;
            padding: 0px;
        }

            .tabs .tabs-list li {
                width: 18%;
                float: left;
                margin: 0px;
                margin-right: 2px;
                padding: 10px 5px;
                text-align: center;
                background-color: cornflowerblue;
                border-radius: 3px;
            }

                .tabs .tabs-list li:hover {
                    cursor: pointer;
                }

                .tabs .tabs-list li a {
                    text-decoration: none;
                    color: white;
                }
        /* Tab content section */
        .tabs .tab {
            display: none;
            width: 100%;
            min-height: 250px;
            height: auto;
            border-radius: 3px;
            padding: 20px 15px;
            color: darkslategray;
            clear: both;
        }

            .tabs .tab h3 {
                border-bottom: 3px solid cornflowerblue;
                letter-spacing: 1px;
                font-weight: normal;
                padding: 5px;
            }

            .tabs .tab p {
                line-height: 20px;
                letter-spacing: 1px;
            }

    /* When active state */
    .active {
        display: block !important;
    }

    .tabs .tabs-list li.active {
        background-color: lavender !important;
        color: black !important;
    }

    .active a {
        color: black !important;
    }

    label {
        color: transparent;
        display: block;
    }

    input[type=text] {
        display: block;
        border-width: 0 0 1px !important;
        border-radius: 0;
        border-style: solid;
        border-color: rgba(0, 0, 0, 0.12);
    }

    .input-focused:not(.input-invalid) label {
        color: rgb(16, 108, 200);
    }

    .input-focused:not(.input-invalid) input[type=text] {
        border-color: rgb(16, 108, 200);
    }

    .input-has-value:not(.input-invalid):not(.input-focused) label {
        color: #595959;
    }

    .input-invalid.input-focused label,
    .input-invalid.input-has-value label {
        color: #ff0000;
    }

    .input-invalid input[type=text] {
        border-color: #ff0000;
    }

        .input-invalid input[type=text]::-webkit-input-placeholder {
            color: #ff0000;
        }

            .input-invalid input[type=text]::-webkit-input-placeholder::after {
                content: "\2716";
                /* "X" */
                font-size: 18px;
                color: #ff0000;
                padding-right: 0;
                float: right;
            }

    .input-valid input[type=text]::-webkit-input-placeholder::after {
        content: "\2714";
        /* checkmark */
        font-size: 18px;
        color: #438D5B;
        padding-right: 0;
        float: right;
    }

    .input-invalid input[type=text]::-webkit-input-placeholder::after {
        visibility: visible;
    }

    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        width: 100%;
    }

    .setcolumnswidth {
        width: 50px !important
    }

    .setcolumnswidth1 {
        width: 60px !important
    }
</style>
<div class="app-content content fixed-navbar-inner">
    <div class="content-wrapper">
        <div class="content-header row">
            <div class="col-xl-6 col-lg-12">
                <h4 class="content-header-title m-b-5 m-t-5">Portage Bill</h4>
            </div>
            <div class="col-xl-6 col-lg-12">
            </div>
        </div>
        <div class="card card-content">
            <div class="card-body">
                <form [formGroup]="form">
                    <div class="row">

                        <div class="col">
                            @Html.DropDownList("vesselid", new SelectList(ViewBag.vessel, "Value", "Text"), new { @class = "form-control input-sm", @style = "display:none", id = "vesselid" })
                            @*    <select hidden id="vesselid" name="vesselid" class="form-control input-sm">     
                                <option value="181">Watson</option>
                            </select> *@

                            <select id="year" name="year" class="form-control input-sm">
                                <option value="">select year</option>
                            </select>
                        </div>
                        <div class="col">
                            <select id="month" name="month" class="form-control input-sm">
                                <option value="">select Month</option>
                            </select>

                        </div>

                        <button class="btn btn-primary form-small p-t-3 p-b-3 m-r-10" value="search" name="action" data-toggle="tooltip" type="submit" id="abcdefghi"
                                data-trigger="hover" data-placement="top" data-title="Show Portage Bill (Current Month)">
                            <i class="far fa-eye"></i>
                        </button>
                        <button onclick="exportToExcel()" *ngIf="printRights"
                                class="btn btn-success form-small p-t-3 p-b-3 m-r-5" type="button" data-toggle="tooltip" data-trigger="hover" data-placement="top" data-title="Export to Excel" data-original-title="" title="Generate Portage Bill Excel">
                            <i class="fas fa-file-excel" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-primary form-small p-t-3 p-b-3 m-r-5" onclick="Lockpb()" type="button" data-toggle="tooltip"
                                data-trigger="hover" data-placement="top" data-title="Lock Portage Bill & Send Backup">
                            <i class="fas fa-lock"></i>
                        </button>
                        <button class="btn btn-primary form-small p-t-3 p-b-3 m-r-5" onclick="DownloadSalarySlip()" type="button" data-toggle="tooltip"
                                data-trigger="hover" data-placement="top" data-title="Download salary slip">
                            <i class="fas fa-download"></i>
                        </button>
                        <button class="btn btn-primary form-small p-t-3 p-b-3 m-r-5" (click)="GetTotal()" type="button" data-toggle="tooltip"
                                data-trigger="hover" data-placement="top" data-title="Show Total">
                            <i class="fas fa-money"></i>
                        </button>


                    </div>
                </form>
                <div class="col">
                </div>
            </div>
        </div>
    </div>
    <div class="content-body">
        <div class="row match-height" id="switch">
            <div class="col-lg-12 col-md-12 col-12">
                <div class="card m-b-0">
                    <div id='myVesselModal' class='modal'>
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div id='myModalContent'></div>
                            </div>
                        </div>
                    </div>



                    <div class="tabs">
                        <ul class="tabs-list">
                            <li class="active"><a href="#tab1"> Onboard</a></li>
                            <li><a href="#tab2">Promotion & Change in Contract</a></li>
                            <li><a href="#tab3">Offsigners</a></li>
                        </ul>
                        <div id="goal-list-scroll" class="table-responsive position-relative">
                            <div class="tbl-container">
                                <div class="tbl-fixed">
                                    <div id="tab1" class="tab active">
                                        <table mat-table id="tblonbaord" class="tbl table table-hover table-bordered mb-0 crew-table table-striped">
                                            <thead>
                                                <tr>
                                                    <th class="setcolumnswidth"></th>
                                                    <th class="setcolumnswidth">Sr.No.</th>
                                                    <th>Crew Name</th>
                                                    <th>CDC</th>
                                                    <th class="setcolumnswidth1">Rank</th>
                                                    <th>Signon Date</th>
                                                    <th>PayCommence</th>
                                                    <th>From</th>
                                                    <th>To</th>
                                                    <th class="setcolumnswidth1">No of<br /> Days </th>
                                                    <th>Currency</th>
                                                    <th>Nationality</th>
                                                    <th>Basic Wages</th>
                                                    <th>Fixed/Guaranteed<br /> Overtime</th>
                                                    <th>Leave+Subs.</th>
                                                    <th>U.ALLOW</th>
                                                    <th>Pension Fund </th>

                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>

                                                    <th>Total Wages<br /> per month</th>
                                                    <th>Overtime HR</th>
                                                    <th>Basic Wage</th>
                                                    <th>Fixed/<br />Guaranteed OT</th>
                                                    <th>Leave Pay &<br /> Subsitence Allow. </th>
                                                    <th>Uniform Allow.</th>
                                                    <th>Pension Fund</th>

                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>

                                                    <th>Extra OT</th>
                                                    <th>Other Earning</th>
                                                    <th>Transit Wages</th>
                                                    <th>Total Earnings<br /> (Current Month)</th>
                                                    <th> Bal from<br /> Prev Month</th>
                                                    <th>Reimbursement</th>
                                                    <th>Total Payable</th>
                                                    <th>Leave Pay + <br />Subsitence C/F (This Month)</th>
                                                    <th>Cash Advance</th>
                                                    <th>Bonded Stores</th>
                                                    <th>Other Deduction</th>
                                                    <th>PF Deduction<br /> (Indian)</th>
                                                    <th>8.0% PF Employee<br /> Contribution (On Basic)</th>
                                                    <th>2.0% Union Dues<br /> (On Gross)</th>
                                                    <th>1.0% Welfare<br /> fund (On Gross)</th>
                                                    <th>WHT 5%</th>
                                                    <th>Allotment</th>
                                                    <th>Total Deductions</th>
                                                    <th>Leave<br /> wages B/F</th>
                                                    <th>Leave <br />wages C/F</th>
                                                    <th>Final <br />Balance(n-t)</th>
                                                    <th>Signature</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{
                                                    int sno = 1;
                                                }
                                                @foreach (var item in Model.onsignersportage)
                                                {
                                                    <tr>
                                                        <td>
                                                            @if (item.bowRequest == "yes")
                                                            {
                                                                <a onclick="getdataforbow('@item.From','@item.To',@item.CrewId,@item.CrewListId,@item.ContractId,'@item.CrewName','@item.Currency','@item.RankName','@item.SignOffDate')" class="openbow">
                                                                    <i class="fa fa-info-circle" style="display: @(item.Islocked == 0? "contents" : "none")"></i>
                                                                </a>
                                                            }
                                                            <a onclick="onsignersdata(@item.PFAmount,'@item.CrewName', '@item.RankName', '@item.Currency', '@item.PortageBillId',@item.ContractId,@item.CrewId,@item.CrewListId, '@item.From', '@item.To',@item.TotalDays,@item.BasicWages,@item.FixedGtOT,
  @item.LeavePay,@item.UniformAllow,@item.PensionFund,@item.SpecialAllowance,@item.CompanyAllowance,@item.SecurityAllow,@item.TempFuelAllow,@item.IncentiveAllowance,@item.Seniority,@item.TankerAllowance,@item.Housing,@item.Transport,@item.Utility,@item.Bonus,
@item.SeafarersPF,@item.leavepayaddition,@item.OtherAllow,@item.Reimbursement,@item.contractreimbrusment,@item.contractbonus,@item.contractdedu,
@item.OTHours,@item.otrate,@item.UDdeduction,@item.WFdeduction,@item.WHTdeduction,@item.Gratuity,@item.IndPFAmount,@item.AVC,@item.numberofday,
@item.TransitWages,@item.OtherEarnings,@item.Vesselid,@item.LeaveWagesBF,@item.AppliedCBA,@item.PrevMonthBal,'@item.MidMonthAllotment','onboard','@item.authorityDeduction','@item.Paydate','@item.SignOnDate')">
                                                                <i class="fas fa-edit" style="display: @(item.Islocked == 0? "contents" : "none")"></i>
                                                            </a>
                                                        </td>
                                                        <td> @sno</td>
                                                        <td>@item.CrewName</td>
                                                        <td>@item.cdcno</td>
                                                        <td>@item.RankName</td>
                                                        <td>@item.SignOnDate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.Paydate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.From?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.To?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.TotalDays</td>
                                                        <td>@item.Currency</td>
                                                        <td>@item.Nationality</td>
                                                        <td>@item.BasicWages</td>
                                                        <td>@item.FixedGtOT</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.UniformAllow</td>
                                                        <td>@item.PensionFund</td>

                                                        <td>@item.SpecialAllowance</td>
                                                        <td>@item.CompanyAllowance</td>
                                                        <td>@item.SecurityAllow</td>
                                                        <td>@item.TempFuelAllow</td>
                                                        <td>@item.IncentiveAllowance</td>
                                                        <td>@item.Seniority</td>
                                                        <td>@item.TankerAllowance</td>
                                                        <td>@item.Housing</td>
                                                        <td>@item.Transport</td>
                                                        <td>@item.Utility</td>
                                                        <td>@item.Bonus</td>
                                                        <td>@item.SeafarersPF</td>
                                                        <td>@item.leavepayaddition</td>

                                                        <td>@item.OtherAllow</td>
                                                        <td>@item.TotalWages</td>
                                                        <td>@item.OTHours</td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.BasicWages / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.FixedGtOT * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.LeavePay * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.UniformAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.PensionFund * item.TotalDays / item.numberofday))
                                                        </td>


                                                        <td>
                                                            @string.Format("{0:n2}", (item.SpecialAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.CompanyAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SecurityAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TempFuelAllow / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.IncentiveAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Seniority * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TankerAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Housing * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Transport * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Utility * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Bonus * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SeafarersPF * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.leavepayaddition * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.OtherAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>@item.extraot</td>
                                                        <td>@item.OtherEarnings</td>
                                                        <td>@item.TransitWages</td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.BasicWages / item.numberofday * @item.TotalDays) + (item.FixedGtOT * item.TotalDays / item.numberofday) + (item.LeavePay * item.TotalDays / item.numberofday) + (item.UniformAllow * item.TotalDays / item.numberofday) + (item.PensionFund * item.TotalDays / item.numberofday)
                                                                     + (item.SpecialAllowance * item.TotalDays / item.numberofday) + (item.CompanyAllowance * item.TotalDays / item.numberofday) + (item.SecurityAllow * item.TotalDays / item.numberofday) + (item.TempFuelAllow * item.TotalDays / item.numberofday)
                                                                     + (item.IncentiveAllowance * item.TotalDays / item.numberofday) + (@item.OtherEarnings) + (item.Seniority * item.TotalDays / item.numberofday) + (item.TankerAllowance * item.TotalDays / item.numberofday)
                                                                     + (item.Housing * item.TotalDays / item.numberofday) + (item.Transport * item.TotalDays / item.numberofday) + (item.Utility * item.TotalDays / item.numberofday)
                                                                     + (item.Bonus * item.TotalDays / item.numberofday) + (item.SeafarersPF * item.TotalDays / item.numberofday) + (item.leavepayaddition * item.TotalDays / item.numberofday) + (item.OtherAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>@item.PrevMonthBal</td>
                                                        <td>@item.Reimbursement</td>
                                                        <td>@item.TotalPayable</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.CashAdvance</td>
                                                        <td>@item.BondedStores</td>
                                                        <td>@item.OtherDeductions</td>
                                                        <td>@item.authorityDeduction</td>
                                                        <td>@item.PFAmount</td>
                                                        <td>@item.UDAmount</td>
                                                        <td>@item.WFAmount</td>
                                                        <td>@item.Tax</td>
                                                        <td>@item.Allotments</td>
                                                        <td>@item.TotalDeductions</td>
                                                        <td>@item.LeaveWagesBF</td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.LeaveWagesBF + (item.LeavePay * item.TotalDays / item.numberofday)))
                                                        </td>
                                                        <td>@item.FinalBalance</td>
                                                        <td></td>
                                                    </tr>
                                                    sno++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div id="tab2" class="tab">
                                        <table mat-table id="tblpromotion" class="tbl table table-hover table-bordered mb-0 crew-table table-striped">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th width="50px">Sr.No.</th>
                                                    <th>Crew Name</th>
                                                    <th>CDC</th>
                                                    <th>Rank</th>
                                                    <th>Signon Date</th>
                                                    <th>PayCommence</th>
                                                    <th>From</th>
                                                    <th>To</th>
                                                    <th class="setcolumnswidth1">No of<br /> Days </th>
                                                    <th>Currency</th>
                                                    <th>Nationality</th>
                                                    <th>Basic Wages</th>
                                                    <th>Fixed/Guaranteed<br /> Overtime</th>
                                                    <th>Leave+Subs.</th>
                                                    <th>U.ALLOW</th>
                                                    <th>Pension Fund </th>
                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>
                                                    <th>Total Wages<br /> per month</th>
                                                    <th>Overtime HR</th>
                                                    <th>Basic Wage</th>
                                                    <th>Fixed/<br />Guaranteed OT</th>
                                                    <th>Leave Pay &<br /> Subsitence Allow. </th>
                                                    <th>Uniform Allow.</th>
                                                    <th>Pension Fund</th>
                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>
                                                    <th>Extra OT</th>
                                                    <th>Other Earning</th>
                                                    <th>Transit Wages</th>
                                                    <th>Total Earnings<br /> (Current Month)</th>
                                                    <th> Bal from<br /> Prev Month</th>
                                                    <th>Reimbursement</th>
                                                    <th>Total Payable</th>
                                                    <th>Leave Pay <br />+ Subsitence C/F (This Month)</th>
                                                    <th>Cash Advance</th>
                                                    <th>Bonded Stores</th>
                                                    <th>Other Deduction</th>
                                                    <th>PF Deduction<br /> (Indian)</th>
                                                    <th>8.0% PF Employee<br /> Contribution (On Basic)</th>
                                                    <th>2.0% Union Dues (On Gross)</th>
                                                    <th>1.0% Welfare fund (On Gross)</th>
                                                    <th>WHT 5%</th>
                                                    <th>Allotment</th>
                                                    <th>Total Deductions</th>
                                                    <th>Leave wages B/F</th>
                                                    <th>Leave wages C/F</th>
                                                    <th>Final Balance(n-t)</th>
                                                    <th>Signature</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{
                                                    int index = 1;
                                                }
                                                @foreach (var item in Model.promotionsportagebill)
                                                {
                                                    <tr>
                                                        <td>
                                                            <a onclick="onsignersdata(@item.PFAmount,'@item.CrewName', '@item.RankName', '@item.Currency', '@item.PortageBillId',@item.ContractId,@item.CrewId,@item.CrewListId, '@item.From', '@item.To',@item.TotalDays,@item.BasicWages,@item.FixedGtOT,@item.LeavePay,@item.UniformAllow,@item.PensionFund,
@item.SpecialAllowance,@item.CompanyAllowance,@item.SecurityAllow,@item.TempFuelAllow,@item.IncentiveAllowance,@item.Seniority,@item.TankerAllowance,@item.Housing,@item.Transport,@item.Utility,@item.Bonus,
@item.SeafarersPF,@item.leavepayaddition,@item.OtherAllow,@item.Reimbursement,@item.contractreimbrusment,@item.contractbonus,@item.contractdedu,@item.OTHours,@item.otrate,
@item.UDdeduction,@item.WFdeduction,@item.WHTdeduction,@item.Gratuity,@item.IndPFAmount,@item.AVC,@item.numberofday,'@item.TransitWages',@item.OtherEarnings,@item.Vesselid,@item.LeaveWagesBF,@item.AppliedCBA,@item.PrevMonthBal,'@item.MidMonthAllotment','onboard','@item.authorityDeduction','@item.Paydate','@item.SignOnDate')">
                                                                <i class="fas fa-edit"></i>
                                                            </a>
                                                        </td>
                                                        <td>@index</td>
                                                        <td>@item.CrewName</td>
                                                        <td>@item.cdcno</td>
                                                        <td>@item.RankName</td>
                                                        <td>@item.SignOnDate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.Paydate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.From?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.To?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.TotalDays</td>
                                                        <td>@item.Currency</td>
                                                        <td>@item.Nationality</td>
                                                        <td>@item.BasicWages</td>
                                                        <td>@item.FixedGtOT</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.UniformAllow</td>
                                                        <td>@item.PensionFund</td>

                                                        <td>@item.SpecialAllowance</td>
                                                        <td>@item.CompanyAllowance</td>
                                                        <td>@item.SecurityAllow</td>
                                                        <td>@item.TempFuelAllow</td>
                                                        <td>@item.IncentiveAllowance</td>
                                                        <td>@item.Seniority</td>
                                                        <td>@item.TankerAllowance</td>
                                                        <td>@item.Housing</td>
                                                        <td>@item.Transport</td>
                                                        <td>@item.Utility</td>
                                                        <td>@item.Bonus</td>
                                                        <td>@item.SeafarersPF</td>
                                                        <td>@item.leavepayaddition</td>

                                                        <td>@item.OtherAllow</td>
                                                        <td>@item.TotalWages</td>
                                                        <td>@item.OTHours</td>

                                                        <td>
                                                            @string.Format("{0:n2}", (item.BasicWages / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.FixedGtOT * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.LeavePay * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.UniformAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.PensionFund * item.TotalDays / item.numberofday))
                                                        </td>


                                                        <td>
                                                            @string.Format("{0:n2}", (item.SpecialAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.CompanyAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SecurityAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TempFuelAllow / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.IncentiveAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Seniority * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TankerAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Housing * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Transport * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Utility * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Bonus * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SeafarersPF * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.leavepayaddition * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.OtherAllow * item.TotalDays / item.numberofday))
                                                        </td>

                                                        <td>@item.extraot</td>
                                                        <td>@item.OtherEarnings</td>
                                                        <td>@item.TransitWages</td>
                                                        <td>@item.PrevMonthBal</td>
                                                        <td>@item.Reimbursement</td>
                                                        <td>@item.TotalPayable</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.CashAdvance</td>
                                                        <td>@item.BondedStores</td>
                                                        <td>@item.OtherDeductions</td>
                                                        <td>@item.authorityDeduction</td>
                                                        <td>@item.PFAmount</td>
                                                        <td>@item.UDAmount</td>
                                                        <td>@item.WFAmount</td>
                                                        <td>@item.Tax</td>
                                                        <td>@item.Allotments</td>
                                                        <td>@item.TotalDeductions</td>
                                                        <td>@item.LeaveWagesBF</td>
                                                        <td>
                                                            @*@string.Format("{0:n2}", (item.LeaveWagesBF + (item.LeavePay * item.TotalDays / item.numberofday)))*@
                                                        </td>
                                                        <td>@item.FinalBalance</td>
                                                        <td></td>
                                                    </tr>
                                                    index++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div id="tab3" class="tab">
                                        <table mat-table id="tbloffsigners" class="tbl table table-hover table-bordered mb-0 crew-table table-striped">
                                            <thead>
                                                <tr>
                                                    <th width="50px">Sr.No.</th>
                                                    <th>Crew Name</th>
                                                    <th>CDC</th>
                                                    <th>Rank</th>
                                                    <th>Signon Date</th>
                                                    <th>PayCommence</th>
                                                    <th>From</th>
                                                    <th>To</th>
                                                    <th class="setcolumnswidth1">No of<br /> Days </th>
                                                    <th>Currency</th>
                                                    <th>Nationality</th>
                                                    <th>Basic Wages</th>
                                                    <th>Fixed/Guaranteed<br /> Overtime</th>
                                                    <th>Leave+Subs.</th>
                                                    <th>U.ALLOW</th>
                                                    <th>Pension Fund </th>
                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>
                                                    <th>Total Wages<br /> per month</th>
                                                    <th> Overtime HR</th>
                                                    <th>Basic Wage</th>
                                                    <th>Fixed/<br />Guaranteed OT</th>
                                                    <th>Leave Pay &<br /> Subsitence Allow. </th>
                                                    <th>Uniform Allow.</th>
                                                    <th>Pension Fund</th>
                                                    <th>Special <br /> Allowance </th>
                                                    <th>Company <br /> Allowance </th>
                                                    <th>Security<br /> Allowance </th>
                                                    <th>Temp. Fuel Allow<br /> Allowance </th>
                                                    <th>Incentive Allow.</th>
                                                    <th>Seniority</th>
                                                    <th>Tanker Allow. </th>
                                                    <th>Housing</th>
                                                    <th>Transport</th>
                                                    <th>Utility </th>
                                                    <th>Bonus</th>
                                                    <th>Seafarers PF</th>
                                                    <th>Leave Wages-Addnl.</th>
                                                    <th>Other Allowance</th>
                                                    <th>Extra OT</th>
                                                    <th>Other Earning</th>
                                                    <th>Transit Wages</th>
                                                    <th>Total Earnings <br />(Current Month)</th>
                                                    <th> Bal from <br />Prev Month</th>
                                                    <th>Reimbursement</th>
                                                    <th>Total Payable</th>
                                                    <th>Leave Pay + <br />Subsitence C/F (This Month)</th>
                                                    <th>Cash Advance</th>
                                                    <th>Bonded Stores</th>
                                                    <th>Other Deduction</th>
                                                    <th>PF Deduction<br /> (Indian)</th>
                                                    <th>8.0% PF <br />Employee Contribution (On Basic)</th>
                                                    <th>2.0% Union<br /> Dues (On Gross)</th>
                                                    <th>1.0% Welfare <br />fund (On Gross)</th>
                                                    <th>WHT 5%</th>
                                                    <th>Allotment</th>
                                                    <th>Total <br />Deductions</th>
                                                    <th>Leave <br />wages B/F</th>
                                                    <th>Leave <br />wages C/F</th>
                                                    <th>Final <br />Balance(n-t)</th>
                                                    <th>Signature</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{
                                                    int offsignersindex = 1;
                                                }
                                                @foreach (var item in Model.offsignersporatge)
                                                {
                                                    <tr>
                                                        <td>@offsignersindex</td>
                                                        <td>@item.CrewName</td>
                                                        <td>@item.cdcno</td>
                                                        <td>@item.RankName</td>
                                                        <td>@item.SignOnDate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.Paydate?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.From?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.To?.ToString("dd-MMM-yyyy")</td>
                                                        <td>@item.TotalDays</td>
                                                        <td>@item.Currency</td>
                                                        <td>@item.Nationality</td>
                                                        <td>@item.BasicWages</td>
                                                        <td>@item.FixedGtOT</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.UniformAllow</td>
                                                        <td>@item.PensionFund</td>
                                                        <td>@item.SpecialAllowance</td>
                                                        <td>@item.CompanyAllowance</td>
                                                        <td>@item.SecurityAllow</td>
                                                        <td>@item.TempFuelAllow</td>
                                                        <td>@item.IncentiveAllowance</td>
                                                        <td>@item.Seniority</td>
                                                        <td>@item.TankerAllowance</td>
                                                        <td>@item.Housing</td>
                                                        <td>@item.Transport</td>
                                                        <td>@item.Utility</td>
                                                        <td>@item.Bonus</td>
                                                        <td>@item.SeafarersPF</td>
                                                        <td>@item.leavepayaddition</td>
                                                        <td>@item.OtherAllow</td>
                                                        <td>@item.TotalWages</td>
                                                        <td>@item.OTHours</td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.BasicWages / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.FixedGtOT * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.LeavePay * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.UniformAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.PensionFund * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SpecialAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.CompanyAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SecurityAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TempFuelAllow / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.IncentiveAllowance / item.numberofday * @item.TotalDays))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Seniority * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.TankerAllowance * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Housing * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Transport * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Utility * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.Bonus * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.SeafarersPF * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.leavepayaddition * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.OtherAllow * item.TotalDays / item.numberofday))
                                                        </td>
                                                        <td>@item.extraot</td>
                                                        <td>@item.OtherEarnings</td>
                                                        <td>@item.TransitWages</td>
                                                        <td></td>
                                                        <td>@item.PrevMonthBal</td>
                                                        <td>@item.Reimbursement</td>
                                                        <td>@item.TotalPayable</td>
                                                        <td>@item.LeavePay</td>
                                                        <td>@item.CashAdvance</td>
                                                        <td>@item.BondedStores</td>
                                                        <td>@item.OtherDeductions</td>
                                                        <td>@item.authorityDeduction</td>
                                                        <td>@item.PFAmount</td>
                                                        <td>@item.UDAmount</td>
                                                        <td>@item.WFAmount</td>
                                                        <td>@item.Tax</td>
                                                        <td>@item.Allotments</td>
                                                        <td>@item.TotalDeductions</td>
                                                        <td>@item.LeaveWagesBF</td>
                                                        <td>
                                                            @string.Format("{0:n2}", (item.LeaveWagesBF + (item.LeavePay * item.TotalDays / item.numberofday)))
                                                        </td>
                                                        <td>@item.FinalBalance</td>
                                                        <td></td>
                                                    </tr>
                                                    offsignersindex++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Bow model start -->
<div class="modal fade" id="bowmodel" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Generate Bow</h4> <button type="button" onclick="resetbowform()" class="close" data-dismiss="modal">&times;</button>
            </div> <form id="bowform">
                <div class="modal-body">
                    <div style="Color:red; padding-bottom:10px; font-size: 12px !important;"> </div>
                    <h4 style="font-weight: bold; color: #233855; " class="m-b-15">
                        <span style="color: #c73f16; float: right; font-size: 14px;">
                            <span id="crewname"></span><span class="p-l-5 p-r-5">|</span>  <span id="crewrank"></span>
                            <span class="p-l-5 p-r-5">|</span> Currency: <span id="currency"></span>
                        </span><br>
                        <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                    </h4>
                    <div class="row" style="margin: 20px 0px;">
                        <div class="col-lg-5"
                             style="padding: 5px 20px; background: #F2F4F8; border:1px solid #e0e0e0; border-right: none;">
                            <p>Total Earn: <span id="totalpay"></span> </p>
                            <p>Total Dedcution: <span id="totaldeduc"></span></p>
                            <p>Final Balance : <span id="finalbal"></span></p>
                            <input id="TotalPayable" name="TotalPayable" hidden>
                            <input id="TotalDeductions" name="TotalDeductions" hidden>
                            <input id="FinalBalance" name="FinalBalance" hidden>
                            <input id="LeaveWagesCf" name="LeaveWagesCf" hidden>
                            @*<input id="LeaveWagesBf" name="LeaveWagesBf" hidden>*@
                            <input id="AppliedCba" name="AppliedCba" hidden>
                            <input id="Transitwages" name="Transitwages" hidden>
                            @*<input id="Tax" name="Tax" hidden>*@
                            @*<input id="Udamount" name="Udamount" hidden>
                                <input id="Wfamount" name="Wfamount" hidden>*@
                            <input id="IsTransitApply" name="IsTransitApply" hidden>
                            <input id="IsPromoted" name="IsPromoted" hidden>
                            <input id="IsLeaveWagesCf" name="IsLeaveWagesCf" hidden>
                            <input id="Avc" name="Avc" hidden>
                            <input id="Gratuity" name="Gratuity" hidden>
                            <input id="IndPfamount" name="IndPfamount" hidden>
                            <input id="IsAddPrevBal" name="IsAddPrevBal" hidden>
                            <input id="IsHoldWageAllotment" name="IsHoldWageAllotment" hidden>
                            <input id="TotalEarnings" name="TotalEarnings" hidden>
                            <input id="whTdeduction" name="whTdeduction" hidden>
                            <input id="UDdeduction" name="UDdeduction" hidden>
                            <input id="wFdeduction" name="wFdeduction" hidden>
                            <input id="tax" name="tax" hidden>
                            <input id="udAmount" name="udAmount" hidden>
                            <input id="wfAmount" name="wfAmount" hidden>
                            <input id="BankAllotmentId1" name="BankAllotmentId1" value="0" hidden>
                            <input id="BankAllotmentId2" name="BankAllotmentId2" value="0" hidden>
                            <button onclick="downloadbow()" class="btn btn-success form-small p-t-3 p-b-3 m-r-5" type="button" data-toggle="tooltip"
                                    data-trigger="hover" data-placement="top" data-title="Download BOW" title="Download BOW">
                                <i class="fas fa-download" aria-hidden="true"></i>Download BOW
                            </button>
                            <button onclick="deleteBow()" class="btn btn-red form-small p-t-3 p-b-3 m-r-5" type="button"
                                    data-toggle="tooltip" data-trigger="hover" data-placement="top" data-title="Delete BOW" data-original-title="" title="Delete BOW">
                                <i class="fas  fa-trash" aria-hidden="true"></i>Delete BOW
                            </button>
                        </div>
                        <div class="col-lg-7" style="padding: 5px 20px; background: #F2F4F8; border:1px solid #e0e0e0">
                            Bank Details*:
                            <div id="crewbank" name="crewbank"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6 col-lg-12">
                            <h4>Earning</h4>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="signOffdate">Sign Off Date</label>
                                    <input id="signOffdate" placeholder="Sign Off Date" class="form-control" name="signOffdate" required>
                                    <input id="CrewId" name="CrewId" hidden>
                                    <input id="CrewListId" name="CrewListId" hidden>
                                    <input id="ContractId" name="ContractId" hidden>
                                    <input id="PortageBillId" name="PortageBillId" hidden>
                                    <input id="From" name="From" hidden>
                                    <input id="To" name="To" hidden>
                                    <input id="Days" name="Days" hidden>
                                    <input id="Vesselid" name="Vesselid" hidden>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="otHours">OT Hours</label>
                                    <input placeholder="OT Hours" type="number" class="form-control" value="0" name="otHours" onchange="calculateot()" required id="otHours">
                                </div>
                                <div class="col form-group input-container">
                                    <label for="extraot">OT Earning</label>
                                    <input placeholder="OT Earning" type="number" class="form-control" value="0" name="extraot" readonly id="extraot">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="OtherEarnings">Other Earning</label>
                                    <input placeholder="Other Earnings" class="form-control" type="number" required value="0" onclick="OtherEarningsopenpopup('bow')" onchange="calculateearning()" name="OtherEarnings" id="OtherEarnings">
                                </div>
                                <div class="col form-group input-container">
                                    <label for="transitDays">Transit Days</label>
                                    <input placeholder="Transit Days" class="form-control" required onchange="calculateearning()" type="number" value="0" name="transitDays" id="transitDays">
                                </div>
                                @*<div class="col form-group input-container">
                                        <label for="reimbursement">Reimbursement</label>
                                        <input placeholder="Reimbursement" class="form-control" required onchange="calculateearning()" type="number" value="0" name="reimbursement" id="reimbursementtt">
                                    </div>*@

                                <div class="col form-group input-container">
                                    <label for="reimbursement">Reimbursement</label>
                                    <input placeholder="Reimbursement" class="form-control" required onchange="calculateearning()" onclick="Reimbursementopenpopup('bow')" type="number" value="0" name="reimbursement" id="reimbursement">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="leaveWagesBF">Leave Wages B/F</label>
                                    <input placeholder="Leave Wages B/F" class="form-control" required readonly type="number" value="0" name="leaveWagesBF" id="leaveWagesBF">
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6 col-lg-12">
                            <h4>Deduction</h4>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="cashAdvance">Cash Advance</label>
                                    <input placeholder="Cash Advance" type="number" class="form-control" required value="0" onchange="calculateearning()" name="cashAdvance" id="cashAdvance">
                                </div>
                                <div class="col form-group input-container">
                                    <label for="bondedStores">Bonded Stores</label>
                                    <input placeholder="Bonded Stores" type="number" class="form-control" required value="0" onchange="calculateearning()" name="bondedStores" id="bondedStores">
                                </div>
                                <div class="col form-group input-container">
                                    <label for="otherDeductions">Other Deductions</label>
                                    <input placeholder="Other Deductions" class="form-control" required onchange="calculateearning()" onclick="OtherDeductionsopenpopup('bow')" value="0" type="number" name="otherDeductions" id="otherDeductions">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="allotments">Allotments</label>
                                    <input placeholder="Allotments" class="form-control" onchange="calculateearning()" required type="number" value="0" name="allotments" id="allotments">
                                </div>
                                <div id="bowallotment2" class="col form-group input-container">
                                    <label for="allotment2">Allotments</label>
                                    <input placeholder="Allotments" class="form-control" onchange="calculateearning()" required type="number" value="0" name="allotment2" id="allotment2">
                                </div>

                                <div class="col form-group s4">
                                    <label for="IsLeaveWagesCF">Is leave wage carry forward?</label>
                                    <input class="form-control" onchange="calculateearning()" disabled type="checkbox" id="IsLeaveWagesCF" name="IsLeaveWagesCF" title="Is leave wage carry forward?">
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group s4">
                                    <input placeholder="Remarks" id="remarks" class="form-control" name="remarks">
                                    <span class="mandatory-fields">*Note: If total earning and deduction doesn't match, then remarks field will be mandatory.</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <Button type="submit" name="submit" id="savebowdata" class="btn btn-success">Submit</Button>
                    <Button type="button" onclick="resetbowform()" class="btn btn-default" data-dismiss="modal">Close</Button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--Bow modal end-->
@*portageBillPopup*@
<!--Portage entry start-->
<div class="modal fade" id="portageBillPopup" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    <b>Portage Entry</b>
                </h4>
                <div class="w-75">
                    <div class="float-right">
                        <span style="color:red" id="pcrewname">&nbsp;</span><span style="color:red">|</span>&nbsp;<span style="color:red" id="pcrewrank"></span>&nbsp;<span style="color:red">|</span>&nbsp;<span style="color:red">Currency:</span><span style="color:red" id="pcurrency"></span>
                    </div>
                </div>
                <button type="button" onclick="resetportageform()" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="portageform">
                    <div style="Color:red; padding-bottom:10px; font-size: 12px !important;"> </div>
                    <h4 style="font-weight: bold; color: #233855; " class="m-b-15">
                        <span style="color: #c73f16; float: right; font-size: 14px;">
                            @*<span id="crewname"></span><span class="p-l-5 p-r-5">|</span>  <span id="crewrank"></span>
                                <span class="p-l-5 p-r-5">|</span> Currency: <span id="currency"></span>*@
                        </span><br>
                        <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                    </h4>
                    <div class="row" style="margin: 20px 0px;">
                        <div class="col-lg-5"
                             style="padding: 5px 20px; background: #F2F4F8; border:1px solid #e0e0e0; border-right: none;">
                            <p>Total Earn: <span id="ptotalpay"></span> </p>
                            <p>Total Dedcution: <span id="ptotaldeduc"></span></p>
                            <p>Final Balance : <span id="pfinalbal"></span></p>
                            <input id="pTotalPayable" name="pTotalPayable" hidden>
                            <input id="pTotalDeductions" name="pTotalDeductions" hidden>
                            <input id="pFinalBalance" name="pFinalBalance" hidden>
                            <input id="ptotalearncurrent" name="ptotalearncurrent" hidden>
                            <input id="pLeaveWagesCf" name="pLeaveWagesCf" hidden>
                            @*<input id="pLeaveWagesBf" name="pLeaveWagesBf" hidden>*@
                            <input id="pAppliedCba" name="pAppliedCba" hidden>
                            <input id="pIsTransitApply" name="pIsTransitApply" hidden>
                            <input id="pIsPromoted" name="pIsPromoted" hidden>
                            <input id="pIsLeaveWagesCf" name="pIsLeaveWagesCf" hidden>
                            <input id="pAvc" name="pAvc" hidden>
                            <input id="pGratuity" name="pGratuity" hidden>
                            <input id="pIndPfamount" name="pIndPfamount" hidden>
                            <input id="pIsAddPrevBal" name="pIsAddPrevBal" hidden>
                            <input id="pIsHoldWageAllotment" name="pIsHoldWageAllotment" hidden>
                            <input id="pwhTdeduction" name="pwhTdeduction" hidden>
                            <input id="pUDdeduction" name="pUDdeduction" hidden>
                            <input id="pwFdeduction" name="pwFdeduction" hidden>
                            <input id="ptax" name="ptax" hidden>
                            <input id="pudAmount" name="pudAmount" hidden>
                            <input id="pwfAmount" name="pwfAmount" hidden>
                            <input id="pBankAllotmentId1" name="pBankAllotmentId1" value="0" hidden>
                            <input id="pBankAllotmentId2" name="pBankAllotmentId2" value="0" hidden>
                        </div>
                        <div class="col-lg-7" style="padding: 5px 20px; background: #F2F4F8; border:1px solid #e0e0e0">
                            Bank Details*:
                            <div id="pcrewbank" name="pcrewbank"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6 col-lg-12">
                            <h4>Earning</h4>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="potHours">OT Hours</label>
                                    <input placeholder="OT Hours" type="number" class="form-control" value="0" name="potHours" onchange="calculateportageot()" id="potHours" required>
                                    <input id="pCrewId" name="pCrewId" hidden>
                                    <input id="pCrewListId" name="pCrewListId" hidden>
                                    <input id="pContractId" name="pContractId" hidden>
                                    <input id="pPortageBillId" name="pPortageBillId" hidden>
                                    <input id="pTransitwages" name="pTransitwages" hidden>
                                    <input id="pFrom" name="pFrom" hidden>
                                    <input id="pTo" name="pTo" hidden>
                                    <input id="pDays" name="pDays" hidden>
                                    <input id="pVesselid" name="pVesselid" hidden>
                                    <input id="psignondate" name="psignondate" hidden>
                                    <input id="ppaycommence" name="ppaycommence" hidden>
                                    <input id="pfrommonthyear" name="pfrommonthyear" hidden>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="pextraot">OT Earning</label>
                                    <input placeholder="OT Earning" type="number" class="form-control" value="0" name="pextraot" readonly id="pextraot" required>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="pearningother">Other Earning</label>
                                    <input placeholder="Other Earnings" class="form-control" type="number" value="0" onclick="OtherEarningsopenpopup('portage')" onchange="calculateportageearning()" name="pearningother" id="pearningother" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="ptransitDays">Transit Days</label>
                                    <input placeholder="Transit Days" class="form-control" readonly onchange="calculateportageearning()" type="number" value="0" name="ptransitDays" id="ptransitDays" required>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="preimbursement">Reimbursement</label>
                                    @*<input placeholder="Reimbursement" class="form-control" onclick="tets()" type="text" name="preimbursement">*@
                                    <input placeholder="Reimbursement" class="form-control" type="number" value="0"
                                           onclick="Reimbursementopenpopup('portage')" name="preimbursement"
                                           onchange="calculateportageearning()" id="preimbursement">

                                </div>
                                <div class="col form-group input-container">
                                    <label for="pleaveWagesBF">Leave Wages B/F</label>
                                    <input placeholder="Leave Wages B/F" class="form-control" readonly type="number" value="0" name="pleaveWagesBF" id="pleaveWagesBF" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="pleaveWagesBF">Bal from Prev Month</label>
                                    <input placeholder="Bal from Prev Month" class="form-control" readonly type="number" value="0" name="pprevMonthBal" id="pprevMonthBal" required>
                                </div>
                            </div>
                        </div>
                        <div class="col-xl-6 col-lg-12">
                            <h4>Deduction</h4>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="pcashAdvance">Cash Advance</label>
                                    <input placeholder="Cash Advance" type="number" class="form-control" value="0" onchange="calculateportageearning()" name="pcashAdvance" id="pcashAdvance" required>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="pbondedStores">Bonded Stores</label>
                                    <input placeholder="Bonded Stores" type="number" class="form-control" value="0" onchange="calculateportageearning()" name="pbondedStores" id="pbondedStores" required>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="potherDeductions">Other Deductions</label>
                                    <input placeholder="Other Deductions" class="form-control" onclick="OtherDeductionsopenpopup('portage')" onchange="calculateportageearning()" value="0" type="number" name="potherDeductions" id="potherDeductions" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col form-group input-container">
                                    <label for="pallotments">Allotments</label>
                                    <input placeholder="Allotments" class="form-control" onchange="calculateportageearning()" type="number" value="0" name="pallotments" id="pallotments" required>
                                </div>
                                <div class="col form-group input-container">
                                    <label for="pallotments">Mid month Allotment</label>
                                    <input placeholder="Mid month Allotment" class="form-control" readonly type="number" value="0" name="pmidmonthallotment" id="pmidmonthallotment" required>
                                </div>
                                <div id="poratgeallotment2" class="col form-group input-container">
                                    <label for="pallotment2">Allotments</label>
                                    <input placeholder="Allotments" class="form-control" onchange="calculateportageearning()" type="number" value="0" name="pallotment2" id="pallotment2" required>
                                </div>
                                @*<div class="col form-group s4">
                                        <label for="pIsLeaveWagesCF">Is leave wage carry forward?</label>
                                        <input class="form-control" onchange="calculateearning()" type="checkbox" id="pIsLeaveWagesCF" name="pIsLeaveWagesCF" title="Is leave wage carry forward?">
                                    </div>*@
                            </div>
                            <div class="row">
                                <div class="col form-group s4">
                                    <label for="premarks">Remarks</label>
                                    @*<input placeholder="Remarks" id="premarks" class="form-control" name="premarks">*@
                                    <textarea placeholder="Remarks" id="premarks" class="form-control" name="premarks"></textarea>
                                    <span class="mandatory-fields">*Note: If total earning and deduction doesn't match, then remarks field will be mandatory.</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <Button type="submit" name="submit" id="saveportagedata" class="btn btn-success">Submit</Button>
                <Button type="button" class="btn btn-default" onclick="resetportageform()" data-dismiss="modal">Close</Button>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="Reimbursementmodal" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    <b>Reimbursements</b>
                </h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <div class="bg-light border p-2 mb-2">
                    <div class="row">
                        <div class="col-md">
                            <h6 style="font-weight: bold; color: #233855;" class="m-b-15">
                                <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                            </h6>
                            <div class="form-group" style="padding: 5px 20px; background: rgb(242, 244, 248); border: 1px solid rgb(224, 224, 224); border-right: none;">
                                <span style="background-color: rgba(242, 244, 248, 1);"> Total Earn : <span id="totalEarn"></span></span>

                            </div>
                        </div>
                        <div class="col-md">
                            <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="contractreimbursement">
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                @Html.DropDownList("SelectAccountCode", new SelectList(string.Empty, "budgetCodeId", "subCode.subCode + ' '+ subCode.subBudget"), new { @class = "form-select form-control", onchange = "AccountCode(this.value, this.options[this.selectedIndex].dataset.earning)" })
                            </div>
                        </div>
                        <div class="col-md">
                            <div class="form-group">
                                <input type="number" placeholder="Amount" id="amount" class="form-control" name="amount">
                            </div>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-primary" id="addButton" type="button" onclick="submitForm()">
                                <i aria-hidden="true" class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="row g-3">
                    <div class="col-md-12">
                        <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="example">
                            <thead>
                                <tr>

                                    <th>Account Code</th>
                                    <th>Amount</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody class="font-small-2" id="table-body">
                            </tbody>
                        </table>
                        <button class="btn btn-primary" type="button" onclick="updateForm()">
                            Update
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="OtherEarningsmodal" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    <b>Other Earnings</b>
                </h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <div class="bg-light border p-2 mb-2">
                    <div class="row">
                        <div class="col-md">
                            <h6 style="font-weight: bold; color: #233855;" class="m-b-15">
                                <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                            </h6>
                            <div class="form-group" style="padding: 5px 0; border-right: none;">
                                <span> Total Earn : <span id="totalotherEarn">0</span></span>
                            </div>
                        </div>
                        <div class="col-md">
                            <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="contractearning">
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                @*@Html.DropDownList("Selectotherearning", new SelectList(string.Empty, "budgetCodeId", "subCode.subCode + ' '+ subCode.subBudget"), new { @class = "form-select form-control", onchange = "AccountCode(this.value)" })*@

                                @Html.DropDownList("Selectotherearning", new SelectList(string.Empty, "budgetCodeId", "subCode.subCode + ' '+ subCode.subBudget"), new { @class = "form-select form-control", onchange = "AccountCodeotherearning(this.value, this.options[this.selectedIndex].dataset.earning)" })




                            </div>
                        </div>
                        <div class="col-md">
                            <div class="form-group">
                                <input type="number" placeholder="Amount" id="otherearningamount" class="form-control" name="amount">
                            </div>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-primary" id="addotherearningButton" type="button" onclick="submitotherearningForm()">
                                <i aria-hidden="true" class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="row g-3">
                    <div class="col-md-12">
                        <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="example">
                            <thead>
                                <tr>

                                    <th>Account Code</th>
                                    <th>Amount</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody class="font-small-2" id="table-bodyotherearning">
                            </tbody>
                        </table>
                        <button class="btn btn-primary" type="button" onclick="updateotherearningForm()">
                            Update
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="OtherDeductionsmodal" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    <b>Other Deductions</b>
                </h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <div class="bg-light border p-2 mb-2">
                    <div class="row">
                        <div class="col-md">
                            <h6 style="font-weight: bold; color: #233855;" class="m-b-15">
                                <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                            </h6>
                            <div class="form-group" style="padding: 5px 0; border-right: none;">
                                <span> Total Earn : <span id="totalOtherDeductions">0</span></span>
                            </div>
                        </div>
                        <div class="col-md">
                            <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="contractdeduction">
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                @*@Html.DropDownList("SelectOtherDeductions", new SelectList(string.Empty, "budgetCodeId", "subCode.subCode + ' '+ subCode.subBudget"), new { @class = "form-select form-control", onchange = "AccountCode(this.value)" })*@

                                @Html.DropDownList("SelectOtherDeductions", new SelectList(string.Empty, "budgetCodeId", "subCode.subCode + ' '+ subCode.subBudget"), new { @class = "form-select form-control", onchange = "AccountCodeOtherDeduction(this.value, this.options[this.selectedIndex].dataset.earning)" })

                            </div>
                        </div>
                        <div class="col-md">
                            <div class="form-group">
                                <input type="number" placeholder="Amount" id="OtherDeductionsamount" class="form-control" name="amount">
                            </div>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-primary" id="addOtherDeductionsButton" type="button" onclick="submitOtherDeductionsForm()">
                                <i aria-hidden="true" class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="row g-3">
                    <div class="col-md-12">
                        <table class="table table-bordered table-sm border-300 display nowrap" style="width:100%" id="example">
                            <thead>
                                <tr>

                                    <th>Account Code</th>
                                    <th>Amount</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody class="font-small-2" id="table-bodyOtherDeductions">
                            </tbody>
                        </table>
                        <button class="btn btn-primary" type="button" onclick="updateOtherDeductionsForm()">
                            Update
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Portage entry end-->
@* <div class="modal fade" id="bowmodel" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Generate Bow</h4> <button type="button" onclick="resetbowform()" class="close" data-dismiss="modal">&times;</button>
            </div> <form id="bowform">
                <div class="modal-body">
                    <div style="Color:red; padding-bottom:10px; font-size: 12px !important;"> </div>
                    <h4 style="font-weight: bold; color: #233855; " class="m-b-15">
                        <span style="color: #c73f16; float: right; font-size: 14px;">
                            <span id="crewname"></span><span class="p-l-5 p-r-5">|</span>  <span id="crewrank"></span>
                            <span class="p-l-5 p-r-5">|</span> Currency: <span id="currency"></span>
                        </span><br>
                        <span class="mandatory-fields"> (Mandatory Fields are sign with asterisk(*)) </span>
                    </h4>

                </div>
                <div class="modal-footer">
                    <Button type="submit" name="submit" id="savebowdata" class="btn btn-success">Submit</Button>
                    <Button type="button" onclick="resetbowform()" class="btn btn-default" data-dismiss="modal">Close</Button>
                </div>
            </form>
        </div>
    </div>
</div> *@
@*<script>
        function myFunction() {
            document.getElementById("myDropdown").classList.toggle("show");
        }
        function filterFunction() {
            var input, filter, a, i;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            div = document.getElementById("myDropdown");
            a = div.getElementsByTagName("a");
            for (i = 0; i < a.length; i++) {
                txtValue = a[i].textContent || a[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    a[i].style.display = "";
                } else {
                    a[i].style.display = "none";
                }
            }
        }
    </script>*@
<script src=”https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js”></script>
<script>
        $(document).ready(function () {
            loadacc();
    /*        loadAccounts();*/
            loadOtherEarning();
            loadOtherDeductions();
            populateTable(accountEntries);


            $(".tabs-list li a").click(function (e) {
                e.preventDefault();
            });
            $(".tabs-list li").click(function () {
                var tabid = $(this).find("a").attr("href");
                $(".tabs-list li,.tabs div.tab").removeClass("active");
                $(".tab").hide();   // hiding open tab
                $(tabid).show();    // show tab
                $(this).addClass("active"); //  adding active class to clicked tab
            });

        });


        const specificValuesids = [];

        var accountid = 0;
        var EarningType = null;
        var commonArray = [];
        var accountCodeName ='';
        var arrayIndex;
        var state;
        var reimbursementArray = [];
        let accountEntriesOtherReimbursement = [];
        var remarks;

        var deleteid = 0;


        // otherEarnings variable


        var accountid = 0;
        var EarningTypeotherEarnings = null;
        var commonArrayotherEarnings = [];
        var accountCodeotherEarning = '';
        var arrayIndexotherEarnings;
        var stateotherEarnings;
        var otherEarningsArray = [];
        var deleteidotherEarning = 0;
        var allotmenttype = '';
        var accountEntriesotherEarnings = [];
           // otherEarnings variable end
        var commonContractwages = [];
        // otherdeduction variable


        var accountid = 0;
        var EarningTypeotherDeductions = null;
        var commonArrayotherDeductions = [];
        var accountCodeotherDeductions = '';
        var arrayIndexotherDeductions;
        var stateotherDeductions;
        var otherDeductionsArray = [];
        var deleteidotherdeduction = 0;
        var codenameOtherDeductions = ""; // Initialize global variable for codename
        let accountEntriesOtherDeduction = []; // Array to store account entries

           // otherEarnings variable end


        function AccountCode(event, earning) {
            accountid = event;
            EarningType = earning;
            $.ajax({
                type: "GET",
                url: `/Portagebill/GetAccountcode?id=${accountid}`,
                datatype: "Json",
                success: function (data) {
                    accountCodeName = data;
                }
            });
        }

        function AccountCodeotherearning(event, earning) {
            accountid = event;
            EarningType = earning;
            $.ajax({
                type: "GET",
                url: `/Portagebill/GetAccountotherearningcode?id=${accountid}`,
                datatype: "Json",
                success: function (data) {
                    accountCodeotherEarning = data;
                }
            });
        }


        function AccountCodeOtherDeduction(event, earning) {

            accountid = event;
            EarningType = earning;
            $.ajax({
                type: "GET",
                url: `/Portagebill/GetAccountOtherDeductionscode?id=${accountid}`,
                datatype: "Json",
                success: function (data) {
                    accountCodeotherDeductions = data;
                }
            });
        }

        function loadacc() {

            $.ajax({
                type: "GET",
                url: "/Portagebill/GetAccounts",
                datatype: "Json",
                success: function (data) {

                    console.log(data);
                    $('#SelectAccountCode').append('<option value="">Account Code / Name</option>');
                    $.each(data, function (index, value) {
                        /*  $('#SelectAccountCode').append('<option value="' + value.subCodeId + '">' + value.subCode.subCode + + ' ' + value.subCode.subBudget + '</option>');*/

                        $('#SelectAccountCode').append(
                            `<option value="${value.subCodeId}" data-earning="${value.earning}">${value.subCode.subCode} ${value.subCode.subBudget}</option>`
                        );

                    })
                }
            });
        }


        function loadOtherEarning() {
            $.ajax({
                type: "GET",
                url: "/Portagebill/GetAccountotherearnings",
                datatype: "Json",
                success: function (data) {

                    $('#Selectotherearning').append('<option value="">Account Code / Name</option>');
                    $.each(data, function (index, value) {
                       /* $('#Selectotherearning').append('<option value="' + value.subCodeId + '">' + value.subCode.subCode + + ' ' + value.subCode.subBudget + '</option>');*/

                        $('#Selectotherearning').append(
                            `<option value="${value.subCodeId}" data-earning="${value.earning}">${value.subCode.subCode} ${value.subCode.subBudget}</option>`
                        );



                    })
                }
            });
        }

        function loadOtherDeductions() {
            $.ajax({
                type: "GET",
                url: "/Portagebill/GetAccountOtherDeductions",
                datatype: "Json",
                success: function (data) {

                    $('#SelectOtherDeductions').append('<option value="">Account Code / Name</option>');
                    $.each(data, function (index, value) {
                        $('#SelectOtherDeductions').append(
                            `<option value="${value.subCodeId}" data-earning="${value.earning}">${value.subCode.subCode} ${value.subCode.subBudget}</option>`
                        );

                      /*  $('#SelectOtherDeductions').append('<option value="' + value.subCodeId + '">' + value.subCode.subCode + + ' ' + value.subCode.subBudget + '</option>');*/
                    })
                }
            });
        }

        var codename = ""; // Initialize global variable for codename
        let accountEntries = []; // Array to store account entries




        function submitForm() {
            const subCodeId = accountid;
            const Type = EarningType;
            const amountInput = document.getElementById('amount');
            const amount = parseFloat(amountInput.value);
            if (isValidAmount(amount)) {
                if (state == 'Edit') {
                    commonArray[arrayIndex].SubCodeId = accountid;
                    commonArray[arrayIndex].Codename = accountCodeName;
                    commonArray[arrayIndex].Amount = amount;
                }

                else if (state == 'Delete')
                {
                    commonArray.splice(arrayIndex, 1);
                    ReimbursementsIddelete = deleteid;
                    $.ajax({
                        type: "GET",
                        url: `/Portagebill/PortageReimbursementdelete?PortageEarningDeductionId=${ReimbursementsIddelete}`,
                        datatype: "Json",
                        success: function (data)
                        {
                            console.log(data);
                        }
                    });
                    updateTotalEarn();
                    updateForm();
                }
                else
                {
                    debugger

                        var accountEntries = [];
                        accountEntries.Codename = accountCodeName;
                        accountEntries.Amount = amount;
                        accountEntries.SubCodeId = subCodeId;
                        accountEntries.Type = Type;
                        commonArray.push(accountEntries);
                }
                populateTable(commonArray);

            } else {
                alert('Please enter a valid amount.');
            }
        }

        var codenameOtherearning = ""; // Initialize global variable for codename
        let accountEntriesOtherearning = []; // Array to store account entries


        function submitotherearningForm() {
            debugger
            const subCodeId = accountid;
            const Type = EarningType;
            const amountInput = document.getElementById('otherearningamount');
            const amount = parseFloat(amountInput.value);
            if (isValidAmount(amount)) {
                if (state == 'Edit') {
                    commonArrayotherEarnings[arrayIndexotherEarnings].SubCodeId = accountid;
                    commonArrayotherEarnings[arrayIndexotherEarnings].Codename = accountCodeotherEarning;
                    commonArrayotherEarnings[arrayIndexotherEarnings].Amount = amount;
                }

                else if (state == 'Delete') {
                    commonArrayotherEarnings.splice(arrayIndexotherEarnings, 1);
                   // alert(deleteidotherEarning)
                    OtherEarningIddelete = deleteidotherEarning;
                    $.ajax({
                        type: "GET",
                        url: `/Portagebill/PortageOtherEarningdelete?OtherEarningIddeleteId=${OtherEarningIddelete}`,
                        datatype: "Json",
                        success: function (data) {
                        }
                    });
                    updateTotalotherEarn();
                    updateotherearningForm();
                }
                else {
                    debugger
                    let otherEarningAccountEntry =[];
                    //commonArrayotherEarnings = [];
                    otherEarningAccountEntry.Codename = accountCodeotherEarning;
                    otherEarningAccountEntry.Amount = amount;
                    otherEarningAccountEntry.SubCodeId = subCodeId;
                    otherEarningAccountEntry.Type = Type;
                    //accountEntriesotherEarnings.push(otherEarningAccountEntry);
                    commonArrayotherEarnings.push(otherEarningAccountEntry);
                }

                populateTableotherearning(commonArrayotherEarnings);

            } else {
                alert('Please enter a valid amount.');
            }

        }

        function submitOtherDeductionsForm() {

            const subCodeId = accountid;
            const Type = EarningType;
            const amountInput = document.getElementById('OtherDeductionsamount');
            const amount = parseFloat(amountInput.value);
            if (isValidAmount(amount)) {
                if (state == 'Edit') {
                    commonArrayotherDeductions[arrayIndexotherDeductions].SubCodeId = accountid;
                    commonArrayotherDeductions[arrayIndexotherDeductions].Codename = accountCodeotherDeductions;
                    commonArrayotherDeductions[arrayIndexotherDeductions].Amount = amount;
                }

                else if (state == 'Delete') {
                    commonArrayotherDeductions.splice(arrayIndexotherDeductions, 1);

                    //alert(deleteidotherdeduction)
                    OtherEarningIddelete = deleteidotherdeduction;
                    $.ajax({
                        type: "GET",
                        url: `/Portagebill/PortageOtherDeductionsdelete?OtherEarningIddeleteId=${OtherEarningIddelete}`,
                        datatype: "Json",
                        success: function (data) {
                        }
                    });
                    updateTotalOtherDeductions();
                    updateOtherDeductionsForm();

                }
                else {
                    var accountEntries = [];
                    accountEntries.Codename = accountCodeotherDeductions;
                    accountEntries.Amount = amount;
                    accountEntries.SubCodeId = subCodeId;
                    accountEntries.Type = Type;
                    commonArrayotherDeductions.push(accountEntries);
                }

                populateTableOtherDeductions(commonArrayotherDeductions);

            } else {
                alert('Please enter a valid amount.');
            }

        }

        function accountname(accountname) {

            pp == accountname;
        }


        // Helper function to validate amount
        function isValidAmount(amount) {
            return !isNaN(amount) && amount > 0;
        }

        // Function to update total earnings
        function updateTotalEarn() {
            debugger
            if (commonArray.length != 0) {
                var amount = 0;
                for (let item of commonArray) {
                    amount += item.Amount;
                }
                for (let item of accountEntriesOtherReimbursement ) {
                    amount += item.Amount;
                }
                const totalEarnElement = document.getElementById('totalEarn');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = amount.toFixed(2);
            }
            else
            {
                const totalEarnElement = document.getElementById('totalEarn');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = 0.00;
            }

        }

        function updateTotalotherEarn(amount) {
            debugger

            if (commonArrayotherEarnings .length != 0) {
                var amount = 0;
                for (let item of commonArrayotherEarnings ) {
                    amount += item.Amount;
                }

                for (let item of accountEntriesotherEarnings ) {
                    amount += item.Amount;
                }

                const totalEarnElement = document.getElementById('totalotherEarn');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = amount.toFixed(2);
            }
            else {
                const totalEarnElement = document.getElementById('totalotherEarn');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = 0.00;
            }

            //const totalEarnElement = document.getElementById('totalotherEarn');
            //const currentTotal = parseFloat(totalEarnElement.innerText);
            //const newTotal = currentTotal + amount;
            //totalEarnElement.innerText = newTotal.toFixed(2);
        }


        function updateTotalOtherDeductions(amount) {
            if (commonArrayotherDeductions.length != 0) {
                var amount = 0;
                for (let item of commonArrayotherDeductions) {
                    amount += item.Amount;
                }

                for (let item of accountEntriesOtherDeduction ) {
                    amount += item.Amount;
                }
                const totalEarnElement = document.getElementById('totalOtherDeductions');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = amount.toFixed(2);
            }

            else {
                const totalEarnElement = document.getElementById('totalOtherDeductions');
                const currentTotal = parseFloat(totalEarnElement.innerText);
                totalEarnElement.innerText = 0.00;
            }

        }


        function populateTable(accountEntries) {

            const tableBody = document.getElementById('table-body');
            tableBody.innerHTML = '';
            let index;
            for (let i = 0; i < accountEntries.length; i++)
            {
                state = 'Add';
                accountEntries[i].Index = i;
                const row = document.createElement('tr');
                const cellActions = document.createElement('td');
                const editIcon = document.createElement('i');
                editIcon.className = 'fa fa-edit';
                editIcon.style.cursor = 'pointer';
                editIcon.style = 'padding-right: 6px';
                editIcon.onclick = () => {
                    state = 'Edit';
                    //var PortageEarningDeductionId = item.PortageEarningDeductionId;
                    $("#SelectAccountCode").val(accountEntries[i].SubCodeId);
                    $("#amount").val(accountEntries[i].Amount);
                    accountid = accountEntries[i].SubCodeId;
                    accountCodeName = accountEntries[i].Codename;
                    arrayIndex = i;

                }

                // Add a spacer
                const spacer = document.createElement('span');
                spacer.style.marginRight = '18px';
                cellActions.appendChild(spacer);

                // Create delete icon
                const deleteIcon = document.createElement('i');
                deleteIcon.className = 'fa fa-trash-o';
                deleteIcon.style.cursor = 'pointer';
                deleteIcon.onclick = () => {
                    $("#amount").val(accountEntries[i].Amount);
                    arrayIndex = i;
                    state = 'Delete';
                   deleteid = accountEntries[i].PortageEarningDeductionId;
                    submitForm();


                };

                const cellAccountCode = document.createElement('td');
                cellAccountCode.textContent = accountEntries[i].Codename;
                row.appendChild(cellAccountCode);
                const cellAmount = document.createElement('td');
                cellAmount.textContent = accountEntries[i].Amount.toFixed(2);
                row.appendChild(cellAmount);
                cellActions.appendChild(editIcon);
                cellActions.appendChild(deleteIcon);
                row.appendChild(cellActions);
                tableBody.appendChild(row);
            };
            updateTotalEarn();

            $('#SelectAccountCode').val("");
            $('#amount').val("");

        }


        function populateTableotherearning(accountEntriesOtherearning) {
            debugger
                const tableBody = document.getElementById('table-bodyotherearning');
                tableBody.innerHTML = '';
                let index;
                for (let i = 0; i < accountEntriesOtherearning.length; i++) {
                    state = 'Add';
                    accountEntriesOtherearning[i].Index = i;
                    const row = document.createElement('tr');
                    const cellActions = document.createElement('td');
                    // Create edit icon
                    // Create edit icon
                    const editIcon = document.createElement('i');
                    editIcon.className = 'fa fa-edit';
                    editIcon.style.cursor = 'pointer';
                    editIcon.style = 'padding-right: 6px';
                    editIcon.onclick = () => {
                        state = 'Edit';
                        //var PortageEarningDeductionId = item.PortageEarningDeductionId;
                        $("#Selectotherearning").val(accountEntriesOtherearning[i].SubCodeId);
                        $("#otherearningamount").val(accountEntriesOtherearning[i].Amount);
                        accountid = accountEntriesOtherearning[i].SubCodeId;
                        accountCodeotherEarning = accountEntriesOtherearning[i].Codename;
                        arrayIndexotherEarnings = i;

                    }


                    // Add a spacer
                    const spacer = document.createElement('span');
                    spacer.style.marginRight = '18px';
                    cellActions.appendChild(spacer);

                    // Create delete icon
                    const deleteIcon = document.createElement('i');
                    deleteIcon.className = 'fa fa-trash-o';
                    deleteIcon.style.cursor = 'pointer';

                    deleteIcon.onclick = () => {
                        $("#otherearningamount").val(accountEntriesOtherearning[i].Amount);
                        arrayIndexotherEarnings = i;
                        state = 'Delete';
                        deleteidotherEarning = accountEntriesOtherearning[i].PortageEarningDeductionId;
                        submitotherearningForm();

                    };

                    const cellAccountCode = document.createElement('td');
                    cellAccountCode.textContent = accountEntriesOtherearning[i].Codename;
                    row.appendChild(cellAccountCode);
                    const cellAmount = document.createElement('td');
                    cellAmount.textContent = parseFloat(accountEntriesOtherearning[i].Amount).toFixed(2);
                    row.appendChild(cellAmount);
                    cellActions.appendChild(editIcon);
                    cellActions.appendChild(deleteIcon);
                    row.appendChild(cellActions);
                    tableBody.appendChild(row);

                };
                updateTotalotherEarn();
                $('#Selectotherearning').val("");
                $('#otherearningamount').val("");

            }

        function populateTableOtherDeductions(accountEntriesOtherDeductions) {
            const tableBody = document.getElementById('table-bodyOtherDeductions');
            tableBody.innerHTML = '';
            let index;
            for (let i = 0; i < accountEntriesOtherDeductions.length; i++) {
                state = 'Add';
                accountEntriesOtherDeductions[i].Index = i;
                const row = document.createElement('tr');
                const cellActions = document.createElement('td');
                // Create edit icon
                // Create edit icon
                const editIcon = document.createElement('i');
                editIcon.className = 'fa fa-edit';
                editIcon.style.cursor = 'pointer';
                editIcon.style = 'padding-right: 6px';
                editIcon.onclick = () => {
                    state = 'Edit';
                    //var PortageEarningDeductionId = item.PortageEarningDeductionId;
                    $("#SelectOtherDeductions").val(accountEntriesOtherDeductions[i].SubCodeId);
                    $("#OtherDeductionsamount").val(accountEntriesOtherDeductions[i].Amount);
                    accountid = accountEntriesOtherDeductions[i].SubCodeId;
                    accountCodeotherDeductions = accountEntriesOtherDeductions[i].Codename;
                    arrayIndexotherDeductions = i;

                }


                // Add a spacer
                const spacer = document.createElement('span');
                spacer.style.marginRight = '18px';
                cellActions.appendChild(spacer);

                // Create delete icon
                const deleteIcon = document.createElement('i');
                deleteIcon.className = 'fa fa-trash-o';
                deleteIcon.style.cursor = 'pointer';

                deleteIcon.onclick = () => {
                    $("#OtherDeductionsamount").val(accountEntriesOtherDeductions[i].Amount);
                    arrayIndexotherDeductions = i;
                    state = 'Delete';
                    deleteidotherdeduction = accountEntriesOtherDeductions[i].PortageEarningDeductionId;
                    submitOtherDeductionsForm();

                };

                const cellAccountCode = document.createElement('td');
                cellAccountCode.textContent = accountEntriesOtherDeductions[i].Codename;
                row.appendChild(cellAccountCode);
                const cellAmount = document.createElement('td');
                cellAmount.textContent = accountEntriesOtherDeductions[i].Amount.toFixed(2);
                row.appendChild(cellAmount);
                cellActions.appendChild(editIcon);
                cellActions.appendChild(deleteIcon);
                row.appendChild(cellActions);
                tableBody.appendChild(row);
            };
            updateTotalOtherDeductions();

            $('#SelectOtherDeductions').val("");
            $('#OtherDeductionsamount').val("");

        }

        function updateForm() {
            debugger;
            otherdeductionremark()
            updateCombinedForm();
            updateee();
            var totalEarnElement = document.getElementById('totalEarn');
            var pp = totalEarnElement ? totalEarnElement.textContent.replace(/[^0-9.-]+/g, '') : '';
            var numericValue = parseFloat(pp);
            if (allotmenttype == 'bow') {
                $('#reimbursement').prop("value", numericValue);
                calculateearning();
            }
            else {
                $('#preimbursement').prop("value", numericValue);
                 calculateportageearning();
            }
            $("#Reimbursementmodal").modal('hide');
        }

        function updateotherearningForm() {
            debugger
            updateCombinedForm();
            updateOtherearningg();
            var totalEarnElement = document.getElementById('totalotherEarn');
            var pp = totalEarnElement ? totalEarnElement.textContent.replace(/[^0-9.-]+/g, '') : '';
            var numericValue = parseFloat(pp);
            if (allotmenttype == 'bow') {
                $('#OtherEarnings').prop("value", numericValue);
                calculateearning();
            }
            else {
                $('#pearningother').prop("value", numericValue);
                calculateportageearning();
            }
            $("#OtherEarningsmodal").modal('hide');
        }

        function updateOtherDeductionsForm()
        {
            updateCombinedForm();
            updateaccountEntriesOtherDeduction();
            var totalEarnElement = document.getElementById('totalOtherDeductions');
            var pp = totalEarnElement ? totalEarnElement.textContent.replace(/[^0-9.-]+/g, '') : '';
            var numericValue = parseFloat(pp);
            if (allotmenttype == 'bow') {
                $('#otherDeductions').prop("value", numericValue);
                calculateearning();
            }
            else {
                $('#potherDeductions').prop("value", numericValue);
                 calculateportageearning();
            }
            $("#OtherDeductionsmodal").modal('hide');
        }

        let mm = [];

        function updateee() {

            if (commonArray.length > 0) {
                commonArray.forEach(entry => {
                    mm.push({
                        subCode: entry.SubCodeId,
                        type: entry.Type,
                        Amount: entry.Amount,
                        portageEarningDeductionId: entry.PortageEarningDeductionId,

                    });
                });
            }
            console.log(mm);
        }

        let oo = [];

        function updateOtherearningg() {

            if (commonArrayotherEarnings.length > 0) {

                commonArrayotherEarnings.forEach(entry => {
                    oo.push({
                        subCode: entry.SubCodeId,
                        type: entry.Type,
                        Amount: entry.Amount,
                        portageEarningDeductionId: entry.PortageEarningDeductionId,
                    });
                });
            }
            console.log(commonArrayotherEarnings);

        }

        let uppOtherdeduction = [];

        function updateaccountEntriesOtherDeduction() {
            if (commonArrayotherDeductions.length > 0) {
                commonArrayotherDeductions.forEach(entry => {
                    uppOtherdeduction.push({
                        subCode: entry.SubCodeId,
                        type: entry.Type,
                        Amount: entry.Amount,
                        portageEarningDeductionId: entry.PortageEarningDeductionId,
                    });
                });
            }

            console.log(commonArrayotherDeductions);
        }

        var pp = '';
        function updateCombinedForm() {
            debugger

                const specificValues = [];
                // if (allAccountData3.length > 0) {
                //    allAccountData = allAccountData3;
                // }

                if (accountEntriesotherEarnings.length > 0) {
                accountEntriesotherEarnings.forEach(entry => {
                    specificValues.push(`${entry.Codename} (${currency}) : ${entry.Amount}`);
                });
            }

                if (accountEntriesOtherDeduction.length > 0) {
                accountEntriesOtherDeduction.forEach(entry => {
                    specificValues.push(`${entry.Codename} (${currency}) : ${entry.Amount}`);
                });
            }

             if (accountEntriesOtherReimbursement.length > 0) {
                accountEntriesOtherReimbursement.forEach(entry => {
                    specificValues.push(`${entry.Codename} (${currency}) : ${entry.Amount}`);
                });
            }

            if (commonContractwages.length > 0) {
                commonContractwages.forEach(entry => {
                    specificValues.push(` ${entry.Codename} (${currency}) : ${entry.Amount}`);
                });
            }

                if (commonArrayotherEarnings.length > 0) {

                    commonArrayotherEarnings.forEach(entry => {
                        specificValues.push(` ${entry.Codename} (${currency}) : ${entry.Amount}`);
                    });
                }

                if (commonArrayotherDeductions.length > 0) {
                    commonArrayotherDeductions.forEach(entry => {
                        specificValues.push(` ${entry.Codename} (${(currency)}) : ${entry.Amount}`);
                    });

                }

                if (commonArray.length > 0) {
                    commonArray.forEach(entry => {
                    specificValues.push(` ${entry.Codename} (${(currency)}) : ${entry.Amount}`);
                        specificValuesids.push(entry.SubCodeId);
                    });
                }
            if (allotmenttype == 'bow') {
                $('#remarks').val(specificValues.join(','));
            }
            else {
                $('#premarks').val(specificValues.join(','));
            }
                pp = specificValuesids.join(',');
        }

        function otherdeductionremark()
        {
            const PortageBillId = PortageBillIdglobal;
            const Type = "Deduction";
            if (otherDeductionsArray.length == 0) {
                $.ajax({
                    type: "GET",
                    url: "/Portagebill/PortageReimbursementDetailsbyid",
                    data: { type: Type, portageBillId: PortageBillId },
                    dataType: "json",
                    success: function (response) {
                        if (!response || response.length === 0) {
                            console.warn("No reimbursement details found.");
                            return;
                        }
                        const accountEntriesOtherDeductions = [];
                        for (let i = 0; i < response.length; i++) {
                            var accountOtherEarning = [];
                            accountOtherEarning.Index = i;
                            accountOtherEarning.PortageEarningDeductionId = response[i].portageEarningDeductionId;
                            accountOtherEarning.Codename = `${response[i].subCode} ${response[i].subBudget}`;
                            accountOtherEarning.Amount = response[i].amount;
                            accountOtherEarning.Type = response[i].type;
                            accountOtherEarning.SubCodeId = response[i].subCodeId;
                            accountEntriesOtherDeductions.push(accountOtherEarning);
                        }

                        otherDeductionsArray = accountEntriesOtherDeductions;
                        if (commonArrayotherDeductions.length == 0)
                        {
                            commonArrayotherDeductions = accountEntriesOtherDeductions;
                            populateTableOtherDeductions(commonArrayotherDeductions);
                        }

                    },
                    error: function (err) {
                        console.error("Error fetching reimbursement details:", err);
                    }
                });
            }
        }

         function formatDate(date) {


        //let dateString = convertDateToUTC(date);
        //const d = parseDate(date);
         const d = new Date(date);
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }

         function parseDate(dateString) {
        const parts = dateString.split('/');

        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1], 10) - 1;
        const year = parseInt(parts[2], 10) + 2000;


        return new Date(year, month, day);
    }

        function Reimbursementopenpopup(type) {
            var preimbursementvalue = 0;
        this.allotmenttype = type;
              if (type == 'bow') {
            preimbursementvalue = $('#reimbursement').val();
        }
        else {
            preimbursementvalue = $('#preimbursement').val();
        }
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Reimbursement', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
             success: function (response) {
                if (response.length > 0) {
                $("#contractreimbursement").empty();
                var rows = '';
                rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
                $(response).each(function (index, item) {
                    var i = parseInt(index) + 1;
                    rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
                    debugger
                        let otherReimbursementAccountEntry =[];
                        accountEntriesOtherReimbursement =[];
                        otherReimbursementAccountEntry.Codename = item.accountName;
                        otherReimbursementAccountEntry.Amount = parseFloat(item.amount);
                        otherReimbursementAccountEntry.SubCodeId = item.accountCode;
                        otherReimbursementAccountEntry.Type = 'Reimbursement';
                        accountEntriesOtherReimbursement.push(otherReimbursementAccountEntry);
                        updateCombinedForm();
                       // commonContractwages.push(accountEntriesotherEarnings);
                });
                $('#contractreimbursement').append(rows);
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
            if (preimbursementvalue == 0) {
                commonArray = [];
                $("#table-body").empty();
                $('#totalEarn').text("0");
                $("#Reimbursementmodal").modal('show');
                return;
            }
            const PortageBillId = PortageBillIdglobal;
            const Type = "Reimbursement";
            if (reimbursementArray.length == 0) {
                $.ajax({
                    type: "GET",
                    url: "/Portagebill/PortageReimbursementDetailsbyid",
                    data: { type: Type, portageBillId: PortageBillId },
                    dataType: "json",
                    success: function (response) {
                        if (!response || response.length === 0) {
                            console.warn("No reimbursement details found.");
                            return;
                        }
                        const accountEntries = [];
                        for (let i = 0; i < response.length; i++) {
                            var account = [];
                            account.Index = i;
                            account.PortageEarningDeductionId = response[i].portageEarningDeductionId;
                            account.Codename = `${response[i].subCode} ${response[i].subBudget}`;
                            account.Amount = response[i].amount;
                            account.Type = response[i].type;
                            account.SubCodeId = response[i].subCodeId;
                            accountEntries.push(account);
                        }
                        reimbursementArray = accountEntries;
                        if (commonArray.length == 0) {
                            commonArray = accountEntries;
                            populateTable(commonArray);
                        }


                    },
                    error: function (err) {
                        console.error("Error fetching reimbursement details:", err);
                    }
                });
            }

            $("#totalEarn").text(preimbursementvalue);
            $("#Reimbursementmodal").modal('show');
        }

        function GetContractDataOfEarnings()
        {
            debugger
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Earning', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
                $("#contractearning").empty();
                var rows = '';
                rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
                $(response).each(function (index, item) {
                    var i = parseInt(index) + 1;
                    rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
                    debugger
                        let otherEarningAccountEntry =[];
                        accountEntriesotherEarnings =[];
                        otherEarningAccountEntry.Codename = item.accountName;
                        otherEarningAccountEntry.Amount = parseFloat(item.amount);
                        otherEarningAccountEntry.SubCodeId = item.accountCode;
                        otherEarningAccountEntry.Type = 'Earning';
                        accountEntriesotherEarnings.push(otherEarningAccountEntry);
                        updateCombinedForm();
                       // commonContractwages.push(accountEntriesotherEarnings);
                });
                $('#contractearning').append(rows);
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
        }

        function GetContractDataOfDeductions()
        {
            debugger
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Deduction', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
                $("#contractdeduction").empty();
                var rows = '';
                rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
                $(response).each(function (index, item) {
                    var i = parseInt(index) + 1;
                    rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
                    debugger
                        let otherDeductionAccountEntry =[];
                        accountEntriesOtherDeduction =[];
                        otherDeductionAccountEntry.Codename = item.accountName;
                        otherDeductionAccountEntry.Amount = parseFloat(item.amount);
                        otherDeductionAccountEntry.SubCodeId = item.accountCode;
                        otherDeductionAccountEntry.Type = 'Deduction';
                        accountEntriesOtherDeduction.push(otherDeductionAccountEntry);
                        updateCombinedForm();
                       // commonContractwages.push(accountEntriesotherEarnings);
                });
                $('#contractdeduction').append(rows);
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
        }

        function GetContractDataOfReimbursement()
        {
            debugger
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Reimbursement', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
                $("#contractdeduction").empty();
                var rows = '';
                rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
                $(response).each(function (index, item) {
                    var i = parseInt(index) + 1;
                    rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
                    debugger
                        let otherReimbursementAccountEntry =[];
                        accountEntriesOtherReimbursement =[];
                        otherReimbursementAccountEntry.Codename = item.accountName;
                        otherReimbursementAccountEntry.Amount = parseFloat(item.amount);
                        otherReimbursementAccountEntry.SubCodeId = item.accountCode;
                        otherReimbursementAccountEntry.Type = 'Reimbursement';
                        accountEntriesOtherReimbursement.push(otherReimbursementAccountEntry);
                        updateCombinedForm();
                       // commonContractwages.push(accountEntriesotherEarnings);
                });
                $('#contractdeduction').append(rows);
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
        }


        function OtherEarningsopenpopup(type) {
            debugger
                  // this.loadOtherEarning();
        this.allotmenttype = type;
            var pearningothervalue = 0;
       if (type == 'bow') {
            pearningothervalue = $('#OtherEarnings').val();
        }
        else {
            pearningothervalue = $('#pearningother').val();
        }
        debugger;
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Earning', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
                $("#contractearning").empty();
                var rows = '';
                rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
                $(response).each(function (index, item) {
                    var i = parseInt(index) + 1;
                    rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
                    debugger
                        let otherEarningAccountEntry =[];
                        accountEntriesotherEarnings =[];
                        otherEarningAccountEntry.Codename = item.accountName;
                        otherEarningAccountEntry.Amount = parseFloat(item.amount);
                        otherEarningAccountEntry.SubCodeId = item.accountCode;
                        otherEarningAccountEntry.Type = 'Earning';
                        accountEntriesotherEarnings.push(otherEarningAccountEntry);
                       // commonContractwages.push(accountEntriesotherEarnings);
                });
                $('#contractearning').append(rows);
                }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
            if (pearningothervalue == 0) {
                commonArrayotherEarnings = [];
                $("#table-bodyotherearning").empty();
                $('#totalotherEarn').text("0");
                $("#OtherEarningsmodal").modal('show');
                return;
            }
            const PortageBillId = PortageBillIdglobal;
            const Type = "Earning";
            if (otherEarningsArray.length == 0) {
                $.ajax({
                    type: "GET",
                    url: "/Portagebill/PortageReimbursementDetailsbyid",
                    data: { type: Type, portageBillId: PortageBillId },
                    dataType: "json",
                    success: function (response) {
                        if (!response || response.length === 0) {
                            console.warn("No reimbursement details found.");
                            return;
                        }
                        const accountEntriesOtherearning = [];
                        for (let i = 0; i < response.length; i++) {
                            var accountOtherEarning = [];
                            accountOtherEarning.Index = i;
                            accountOtherEarning.PortageEarningDeductionId = response[i].portageEarningDeductionId;
                            accountOtherEarning.Codename = `${response[i].subCode} ${response[i].subBudget}`;
                            accountOtherEarning.Amount = response[i].amount;
                            accountOtherEarning.Type = response[i].type;
                            accountOtherEarning.SubCodeId = response[i].subCodeId;
                            accountEntriesOtherearning.push(accountOtherEarning);
                        }
                        otherEarningsArray = accountEntriesOtherearning;
                        if (commonArrayotherEarnings.length == 0) {
                            commonArrayotherEarnings = accountEntriesOtherearning;
                            populateTableotherearning(commonArrayotherEarnings);
                        }
                    },
                    error: function (err) {
                        console.error("Error fetching reimbursement details:", err);
                    }
                });
            }
            $("#totalotherEarn").text(pearningothervalue);
            $("#OtherEarningsmodal").modal('show');
        }

        function OtherDeductionsopenpopup(type) {
            debugger;
        this.allotmenttype = type;
            var potherDeductions = 0;
            if (type == 'bow') {
                potherDeductions = $('#otherDeductions').val();
            }
            else {
                potherDeductions = $('#potherDeductions').val();
            }
        var crewid = $("#pCrewId").val();
        var ContractId = $("#pContractId").val();
        var signondate = formatDate($("#psignondate").val());
        var paycommence = formatDate($("#ppaycommence").val());
        var frommonthyear = formatDate($("#pFrom").val());
        $.ajax({
            type: "GET",
            url: "/Portagebill/GetContractData",
            data: { 'crewid': crewid, 'contractid': ContractId, 'signondate': signondate, 'type': 'Deduction', 'paycommence': paycommence, 'frommonthyear': frommonthyear },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
         $("#contractdeduction").empty();
         var rows = '';
         rows += "<tr><td>S. No.</td><td>Component Code</td><td>Amount</td></tr>";
         $(response).each(function (index, item) {
             var i = parseInt(index) + 1;
             rows += "<tr><td>" + i + "</td><td>" + item.accountName + "</td><td>" + item.amount + "</td></tr>";
             debugger
                 let otherDeductionAccountEntry =[];
                 accountEntriesOtherDeductions =[];
                 otherDeductionAccountEntry.Codename = item.accountName;
                 otherDeductionAccountEntry.Amount = parseFloat(item.amount);
                 otherDeductionAccountEntry.SubCodeId = item.accountCode;
                 otherDeductionAccountEntry.Type = 'Deduction';
                 accountEntriesOtherDeductions.push(otherDeductionAccountEntry);
                 updateTotalOtherDeductions();
                // commonContractwages.push(accountEntriesotherEarnings);
         });
         $('#contractdeduction').append(rows);
         }
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
            if (potherDeductions == 0) {
                commonArrayotherDeductions = [];
                $("#table-bodyOtherDeductions").empty();
                $('#totalotherEarn').text("0");
                $('#totalOtherDeductions').prop("value", "0");
                $("#totalOtherDeductions").text("0");
                $("#OtherDeductionsmodal").modal('show');
                return;
            }
            const PortageBillId = PortageBillIdglobal;
            const Type = "Deduction";
            if (otherDeductionsArray.length == 0) {
                $.ajax({
                    type: "GET",
                    url: "/Portagebill/PortageReimbursementDetailsbyid",
                    data: { type: Type, portageBillId: PortageBillId },
                    dataType: "json",
                    success: function (response) {
                        if (!response || response.length === 0) {
                            console.warn("No reimbursement details found.");
                            return;
                        }
                        const accountEntriesOtherDeductions = [];
                        for (let i = 0; i < response.length; i++) {
                            var accountOtherEarning = [];
                            accountOtherEarning.Index = i;
                            accountOtherEarning.PortageEarningDeductionId = response[i].portageEarningDeductionId;
                            accountOtherEarning.Codename = `${response[i].subCode} ${response[i].subBudget}`;
                            accountOtherEarning.Amount = response[i].amount;
                            accountOtherEarning.Type = response[i].type;
                            accountOtherEarning.SubCodeId = response[i].subCodeId;
                            accountEntriesOtherDeductions.push(accountOtherEarning);
                        }

                        otherDeductionsArray = accountEntriesOtherDeductions;
                        if (commonArrayotherDeductions.length == 0) {
                            commonArrayotherDeductions = accountEntriesOtherDeductions;
                            populateTableOtherDeductions(commonArrayotherDeductions);
                        }

                    },
                    error: function (err) {
                        console.error("Error fetching reimbursement details:", err);
                    }
                });
            }
            $("#totalotherEarn").text(potherDeductions);


            $("#OtherDeductionsmodal").modal('show');
            //this.loadOtherDeductions();
            //accountEntriesOtherDeductions = [];
            //$("#table-bodyOtherDeductions").empty();
            //$('#totalOtherDeductions').prop("value", "0");
            //$("#totalOtherDeductions").text("0");
            //$("#OtherDeductionsmodal").modal('show');
    }

    function PortageReimbursementDetailsbyidWithoutType()
    {
        $.ajax({
            type: "GET",
            url: "/Portagebill/PortageReimbursementDetailsbyidWithoutType",
            data: { portageBillId: PortageBillIdglobal },
            dataType: "json",
            success: function (response) {
                if (!response || response.length === 0) {
                    console.warn("No reimbursement details found.");
                    return;
                }
                debugger
                const deduction = response.filter(x => x.type == "Deduction");
                const reimbursement = response.filter(x => x.type == "Reimbursement");
                const earning = response.filter(x => x.type == "Earning");
                if (deduction.length != 0) {
                    const accountEntriesOtherDeductions = [];
                    for (let i = 0; i < deduction.length; i++) {
                        var accountOtherEarning = [];
                        accountOtherEarning.Index = i;
                        accountOtherEarning.PortageEarningDeductionId = deduction[i].portageEarningDeductionId;
                        accountOtherEarning.Codename = `${deduction[i].subCode} ${deduction[i].subBudget}`;
                        accountOtherEarning.Amount = deduction[i].amount;
                        accountOtherEarning.Type = deduction[i].type;
                        accountOtherEarning.SubCodeId = deduction[i].subCodeId;
                        accountEntriesOtherDeductions.push(accountOtherEarning);
                    }

                    otherDeductionsArray = accountEntriesOtherDeductions;
                    commonArrayotherDeductions = accountEntriesOtherDeductions;
                    populateTableOtherDeductions(otherDeductionsArray);
                }
                if (reimbursement.length != 0) {
                    const accountEntries = [];
                    for (let i = 0; i < reimbursement.length; i++) {
                        var account = [];
                        account.Index = i;
                        account.PortageEarningDeductionId = reimbursement[i].portageEarningDeductionId;
                        account.Codename = `${reimbursement[i].subCode} ${reimbursement[i].subBudget}`;
                        account.Amount = reimbursement[i].amount;
                        account.Type = reimbursement[i].type;
                        account.SubCodeId = reimbursement[i].subCodeId;
                        accountEntries.push(account);
                    }
                    reimbursementArray = accountEntries;
                    commonArray = accountEntries;
                    populateTable(reimbursementArray);
                }

                if (earning.length != 0) {
                    const accountEntriesOtherearning = [];
                    for (let i = 0; i < earning.length; i++) {
                        var accountOtherEarning = [];
                        accountOtherEarning.Index = i;
                        accountOtherEarning.PortageEarningDeductionId = earning[i].portageEarningDeductionId;
                        accountOtherEarning.Codename = `${earning[i].subCode} ${earning[i].subBudget}`;
                        accountOtherEarning.Amount = earning[i].amount;
                        accountOtherEarning.Type = earning[i].type;
                        accountOtherEarning.SubCodeId = earning[i].subCodeId;
                        accountEntriesOtherearning.push(accountOtherEarning);

                    }

                    otherEarningsArray = accountEntriesOtherearning;
                    commonArrayotherEarnings = accountEntriesOtherearning;
                    populateTableotherearning(otherEarningsArray);
                }




                console.log(response);
            },
            error: function (err) {
                console.error("Error fetching reimbursement details:", err);
            }
        });
    }

</script>

@*@Particulars*@
<script>
    $(function () {
        $("#CustomerGrid .details").click(function () {
            var crewId = $(this).closest("tr").find("td").find("#crewIdcrewList").html();
            $.ajax({
                type: "GET",
                url: "/Home/Details",
                data: { 'crewId': crewId },
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $("#partialModal").find(".modal-body").html(response);
                    $("#partialModal").modal('show');
                    $('#partialModal').on('hidden.bs.modal', function () {
                        location.reload();
                    })
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });
</script>


@*ExcelFile*@

<script>
    function exported(e) {
                                   var value = $("#myselection option:selected");
                                   var name = value.val();
                                   if (name == "Atlantic") {

                                           url = '@Url.Action("AtlanticExcelFile", "Home")';
                                       }
                                   if (name == "OCIMF") {
                                           url = '@Url.Action("GetOCIMFExcelFile", "Home")';
                                   }
                                   if (name == "OLP") {
                                       url = '@Url.Action("OLPExcelFile", "Home")';
                                   }
                                   if (name == "IMO") {
                                       url =('@Url.Action("GenerateIMOPDF", "Home")');

    @*var url = '@Url.Action("GenerateIMOPDF", "Home", new {target="_blank"})';
                                              window.location.href = url;*@
                                       }
                                   if (name == "FPD01") {
                                       url =('@Url.Action("generateFPD01", "Home")');

                                       }
                                  $.ajax({
                                      type: "POST",
                                      url: url,
                                   contentType: "application/json; charset=utf-8",
                                   dataType: "json",
                                    }).done(function (data) {


                                        if (data.fileName != "") {
                                            window.location.href = "@Url.RouteUrl(new { Controller = "Home", Action = "DownloadXL" })/?fileName=" + data.fileName;
                                        }
                                    });
                                 }
</script>


<script>
    function exportToExcel(e) {
        vesselids = $("#vesselid").text();
        years = $("#year").val();
        months = $("#month").val();
                               $.ajax({
                                   type: "POST",
                                   url: '@Url.Action("Genneratexcel", "Portagebill")',
                                   data: { 'vesselId': vesselids, 'month': months, 'year': years, 'currency': "", 'checkpbtilldate': "" },
                               // contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                 }).done(function (data) {
                                     if (data.fileName != "") {
                                         window.location.href = "@Url.RouteUrl(new { Controller = "Home", Action = "DownloadXL" })/?fileName=" + data.fileName;
                                     }
                                 });
                              }
</script>

<script>


</script>

<style>
    .show {
        display: block;
    }

    .tbl {
        table-layout: fixed;
        width: 100%;
        *margin-left: -100px; /*ie7*/
    }

        .tbl td, .tbl th {
            vertical-align: top;
            border-top: 1px solid #ccc;
            padding: 10px;
            width: 100px;
        }

        .tbl th {
            /*  position:absolute;
                        *position: relative; /*ie7*/
            /*  left:0; */
            width: 100px;
        }


    .hard_left {
        position: absolute;
        *position: relative; /*ie7*/
        left: 0;
        width: 100px;
    }

    .next_left {
        position: absolute;
        *position: relative; /*ie7*/
        left: 100px;
        width: 100px;
    }
</style>
<script src="~/js/jquery-3.6.0.js"></script>
<link rel="stylesheet" href="~/css/jquery-ui.css">
<script src="~/js/jquery-ui.js"></script>
<script>
    var addFormFocusEventHandler = function () {
        var placeholder;
        $(document).on("focus", "div.input-container :input", function () {
            $(this).closest("div.input-container").addClass("input-focused");
            placeholder = $(this).prop("placeholder");
            $(this).prop("placeholder", " ");
        }).on("blur", "div.input-container :input", function () {
            $(this).closest("div.input-container").removeClass("input-focused");
            $(this).prop("placeholder", placeholder);
            placeholder = "";
        });
    };
    var addFormValueEventHandler = function () {
        $(document).on("blur", "div.input-container :input", function () {
            if ($(this).val()) {
                $(this).closest("div.input-container").addClass("input-has-value");
            } else {
                $(this).closest("div.input-container").removeClass("input-has-value");
            }
        });
    };
    var initialize = function () {
        addFormFocusEventHandler();
        addFormValueEventHandler();
    };
    initialize();
</script>
<script>
          var totaldeduction = 0; var totalearning = 0; var bowtotalearning = 0; var currency = 0;
          var numberofdays = 0; var BankAllotmentId = 0; var BankAllotmentId2 = 0;
          var from = 0; var to = 0; var days = 0; var portageBillId = 0;
          var basicwage = 0; var totalearncurrent = 0;
          var FixedGtOT = 0;
          var leavePay = 0;
          var UniformAllow = 0;
          var PensionFund = 0;
          var specialAllow = 0;
          var companyAllow = 0;
          var securityAllow = 0;
          var tempFuelAllow = 0;
          var incentiveallow = 0;
          var seniority = 0;
          var tankerallow = 0;
          var housing = 0;
          var transport = 0;
          var utility = 0; var bonus = 0;
          var seafarerspf = 0;
          var leavepayaddition = 0;
          var OtherAllow = 0;

          var contractbonus = 0; var contractreimbrusment = 0; var contractdedu = 0;

          var totalWages = 0;
          var reimbursement = 0;
          var otrate = 0;
          var prevMonthBal = 0;
          var authorityDeduction = 0;
          var appliedCBA = 0;
          var vesselid = 0;
          var pfamount = 0;
          var gratuity = 0;
          var indPFAmount = 0;
          var avc = 0;
          var finalbal = 0;
          var filepath = 0; var BowRequestId = 0;
          var gratuity = 0; var indPFAmount = 0; var avc = 0;
          var enabled = 0; var transitwage = 0
          var UDdeduction = 0; var WFdeduction = 0; var WHTdeduction = 0;
          var udAmount = 0; var wfAmount = 0; var tax = 0; var nigpfAmount = 0;
          var otearning = 0; var othour = 0; var otherEarnings = 0; var transitDays = 0; var reimbursement = 0; var leaveWagesBF = 0;
          var ca = 0; var bs = 0; var od = 0; var allotment = 0; var allotment2 = 0; var midmonthallotment = 0; var crewstatus = "";
          var selectbankids = []; var leavewagesforward = Boolean;
          $("#bowallotment2").hide();
          $("#poratgeallotment2").hide();
          /* function to delete the bow request */
          function deleteBow() {
              $.ajax({
                  url: "/Portagebill/deletebow",
                  type: "POST",
                  dataType: 'json',
                  contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                  data: { 'id': portageBillId },
                  success: function (response) {
                      alert("succesfully deleted")
                  },
                  failure: function (response) {
                      alert(response.responseText);
                  },
                  error: function (response) {
                      alert(response.responseText);
                  }
              });
          }

          /* function to open the bow modal popup */
          function getdataforbow(From, To, CrewId, CrewListId, ContractId, CrewName, Currency, RankName, signOffDate) {
              debugger
              sessionStorage.setItem('crewid', CrewId);
              sessionStorage.setItem('CrewListId', CrewListId);
              selectbankids = [];
              $('#bowmodel').modal('show');
              $("#crewrank").text(RankName);
              $("#crewname").text(CrewName);
              $("#currency").text(Currency);
              $.ajax({
                  type: "GET",
                  url: "/Portagebill/GetCrewBankDetails",
                  data: { 'crewId': CrewId },
                  contentType: "application/json; charset=utf-8",
                  dataType: "json",
                  success: function (response) {
                      $("#crewbank").empty();
                      var table = $('<table></table>');
                      $(response).each(function (index, item) {
                          var i = parseInt(index) + 1;
                          table.append($('<tr></tr>')
                              .append($('<td style="width: 100%;"></td>')
                                  .append($('<input style="float: left;" class="checktest" onchange="getbankid()">').attr({
                                      'id': 'chk' + i,
                                      'type': 'checkbox',
                                      'name': 'bankid',
                                      'value': item.crewBankDetailsId
                                  }))
                                  .append($("<label style='float: right;width:97%'>").attr(
                                      {
                                          'for': 'chk' + i
                                      })
                                      .text(item.fulldetail))
                              ));
                      });
                      $('#crewbank').append(table);
                  },
                  failure: function (response) {
                      alert(response.responseText);
                  },
                  error: function (response) {
                      alert(response.responseText);
                  }
              });
              $.ajax({
                  type: "GET",
                  url: "/Portagebill/getBowRequest",
                  data: { 'crewListId': CrewListId },
                  contentType: "application/json; charset=utf-8",
                  dataType: "json",
                  success: function (bowreqdata) {
                      if (bowreqdata.leaveWagesCarry == 'Yes') {
                          leavewagesforward = true;
                          $("#IsLeaveWagesCF").prop('checked', true);
                      }
                      else {
                          $("#IsLeaveWagesCF").prop('checked', false);  leavewagesforward = false;
                      }
                  },
              })
              if (signOffDate != null && signOffDate != '') {
                  $.ajax({
                      type: "GET",
                      url: "/Portagebill/getBOWData",
                      data: { 'crewId': CrewId, 'crewListId': CrewListId, 'signOffDate': signOffDate },
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      success: function (response) {
                          console.log(response)
                          debugger;
                          currency = (response[0].currency || 0);
                          from = response[0].from;
                          to = response[0].to;
                          basicwage = (response[0].basicWages || 0);
                          FixedGtOT = (response[0].fixedGtOT || 0);
                          leavePay = (response[0].leavePay || 0);
                          UniformAllow = (response[0].uniformAllow || 0);
                          PensionFund = (response[0].pensionFund || 0);
                          securityAllow = (response[0].securityAllow || 0);
                          specialAllow = (response[0].specialAllowance || 0);
                          companyAllow = (response[0].companyAllowance || 0);
                          tempFuelAllow = (response[0].tempFuelAllow || 0);
                          incentiveallow = (response[0].incentiveAllowance || 0);
                          seniority = (response[0].seniority || 0);
                          tankerallow = (response[0].tankerAllowance || 0);
                          housing = (response[0].housing || 0);
                          transport = (response[0].transport || 0);
                          utility = (response[0].utility || 0);
                          bonus = (response[0].bonus || 0);
                          seafarerspf = (response[0].seafarersPF || 0);

                          OtherAllow = (response[0].otherAllow || 0);
                          numberofdays = (response[0].numberofday || 0);
                          otherEarnings = (response[0].otherEarnings || 0);
                          reimbursement = (response[0].reimbursement || 0);
                          portageBillId = (response[0].portageBillId || 0);
                          PortageBillIdglobal = (response[0].portageBillId || 0);
                          ca = (response[0].cashAdvance || 0);
                          bs = (response[0].bondedStores || 0);
                          od = (response[0].otherDeductions || 0);
                          allotment = (response[0].allotments || 0);
                          allotment2 = (response[0].otHours || 0);
                          othour = (response[0].otHours || 0);
                          extraot = (response[0].extraot || 0);
                          $("#signOffdate").val(response[0].signOffDate);
                          transitDays = (response[0].transitDays || 0);
                          $("#CrewId").val((response[0].crewId || 0));
                          $("#CrewListId").val((response[0].crewListId || 0));
                          $("#ContractId").val((response[0].contractId || 0));
                          $("#PortageBillId").val((response[0].portageBillId || 0));
                          $("#From").val((response[0].from || 0));
                          $("#To").val((response[0].to || 0));
                          days = (response[0].totalDays || 0);
                          $("#Days").val(days);
                          $("#Vesselid").val((response[0].vesselid || 0));
                          avc = (response[0].avc || 0);
                          gratuity = (response[0].gratuity || 0);
                          indPFAmount = (response[0].gratuity || 0);
                          $("#Avc").val(avc);
                          $("#remarks").val(response[0].remarks);
                          $("#Gratuity").val(gratuity);
                          $("#IndPfamount").val(indPFAmount);
                          nigpfAmount = (response[0].pfAmount || 0);
                          var vid = $('#vesselid').val();
                          var month = $('#month').val();
                          var year = $('#year').val();


                          $.ajax({
                              type: "GET",
                              url: "/Portagebill/GetBankAllotment",
                              data: { 'vesselId': vid, 'month': month, 'year': year, 'crewid': CrewId, 'ispromoted': 'no' },
                              contentType: "application/json; charset=utf-8",
                              dataType: "json",
                              success: function (bankallormentdetail) {
                                  debugger;
                                  if (bankallormentdetail.length == 1) {
                                      selectbankids = [bankallormentdetail[0].bankId];
                                      $("#allotments").val(bankallormentdetail[0].allotments);
                                      $('input[name=bankid][value="' + bankallormentdetail[0].bankId + '"]').prop('checked', true);
                                      $("#BankAllotmentId1").val(bankallormentdetail[0].bankAllotmentId);
                                  }
                                  else if (bankallormentdetail.length >= 2) {
                                      selectbankids = [bankallormentdetail[0].bankId, bankallormentdetail[1].bankId];
                                      $("#allotments").val(bankallormentdetail[0].allotments);
                                      $('input[name=bankid][value="' + bankallormentdetail[0].bankId + '"]').prop('checked', true);
                                      $("#BankAllotmentId1").val(bankallormentdetail[0].bankAllotmentId);
                                      $("#allotment2").val(bankallormentdetail[1].allotments);
                                      $("#bowallotment2").show();
                                      $('input[name=bankid][value="' + bankallormentdetail[1].bankId + '"]').prop('checked', true);
                                      $("#pBankAllotmentId2").val(bankallormentdetail[1].bankAllotmentId);
                                  }
                              },
                              })
                          if (portageBillId == 0) {
                              $("#cashAdvance").val(0);
                              $("#bondedStores").val(0);
                              $("#otherDeductions").val(0);
                              $("#allotments").val(0); $("#allotment2").val(0);
                              $("#otHours").val(0);
                              $("#extraot").val(0);
                              $("#OtherEarnings").val(otherEarnings);
                              $("#transitDays").val(0);
                              $("#reimbursement").val(reimbursement);
                          }
                          else {
                              $("#cashAdvance").val(ca);
                              $("#bondedStores").val(bs);
                              $("#otherDeductions").val(od);
                              $("#allotments").val(allotment);
                              $("#otHours").val(othour);
                              $("#extraot").val(extraot);
                              $("#OtherEarnings").val(otherEarnings);
                              $("#transitDays").val(transitDays);
                              $("#reimbursement").val(reimbursement);

                              totalearning = (response[0].totalPayable || 0);
                              totaldeduction = (response[0].totalDeductions || 0);
                              finalbal = (response[0].finalBalance || 0);
                              $("#totalpay").text(totalearning);
                              $("#totaldeduc").text(totaldeduction);
                              $("#finalbal").text(finalbal);
                              $("#TotalPayable").val(totalearning);
                              $("#TotalDeductions").val(totaldeduction);
                              $("#FinalBalance").val(finalbal);
                          }
                          otrate = (response[0].otrate || 0);
                          prevMonthBal = (response[0].prevMonthBal || 0);
                          transitwage = (response[0].transitwage || 0);

                          authorityDeduction = (response[0].authorityDeduction || 0);
                          UDdeduction = (response[0].uDdeduction || 0);
                          WFdeduction = (response[0].wFdeduction || 0);
                          WHTdeduction = (response[0].whTdeduction || 0);
                          udAmount = (response[0].wfAmount || 0);
                          wFdeduction = (response[0].wFdeduction || 0);
                          wfAmount = (response[0].wfAmount || 0);
                          leaveWagesBF = (response[0].leaveWagesBF || 0);
                          $("#leaveWagesBF").val(leaveWagesBF);
                          // totalearning = calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, securityAllow, OtherAllow, days, numberofdays, transitwage, otherEarnings)
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              }
          }

          /* function to get the selected bankid */
          function getbankid() {
              selectbankids = [];
              $('input[name=bankid]').each(function (index, item) {
                  if ($(this).is(":checked")) {
                      selectbankids.push($(this).val());
                  }
                  else {
                      removeVal(selectbankids, $(this).val());
                  }
              });
              if (selectbankids.length > 1)
                  $("#bowallotment2").show();
              else {
                  $("#bowallotment2").hide();
                  $("#allotment2").val(0);
              }
              calculateearning();
          }

          /* function to save the bow data */
          $("#savebowdata").click(function () {
              var rmark = $("#remarks").val();
              if (selectbankids.length == 0) {
                  alert("Please select the bank account for allotment")
                  return false;
              }
              if (totalearning != totaldeduction && rmark == "") {
                  alert("Total earning & deduction is not same. Balance is there. Please enter remark")
                  return false;
              }
              $("#bowform").valid();
              if (!$("#bowform").valid()) {
                  return false;
              }
              else
                  savebowdata();
          });

          function savebowdata() {
              debugger;
              var valdata = $("#bowform").serialize();
             console.log(valdata)
              var portageBillVM = {
                  PortageBillId: $("#PortageBillId").val(),
                  From: $("#From").val(),
                  To: $("#To").val(),
                  Vesselid: $("#Vesselid").val(),
                  Othours: $("#OTHours").val(),
                  Days: $("#Days").val(),
                  PrevMonthBal: prevMonthBal,
                  ExtraOt: $("#extraot").val(),
                  BankId: $("#Bankid").val(),
                  AppliedCba: $("#AppliedCba").val(),
                  CrewId: $("#CrewId").val(),
                  CrewListId: $("#CrewListId").val(),
                  ContractId: $("#ContractId").val(),
                  TotalDeductions: $("#TotalDeductions").val(),
                  FinalBalance: $("#FinalBalance").val(),
                  OtherEarnings: $("#OtherEarnings").val(),
                  Reimbursement: $("#reimbursement").val(),
                  CashAdvance: $("#cashAdvance").val(),
                  BondedStores: $("#bondedStores").val(),
                  OtherDeductions: $("#otherDeductions").val(),
                  Allotments: parseFloat($("#allotments").val()) + parseFloat($("#allotment2").val()),
                  LeaveWagesBf: $("#LeaveWagesBf").val(),
                  TotalEarnings: $("#totalearncurrent").val(),
                  Remarks: $("#remarks").val(),
                  TransitDays: $("#transitDays").val(),
                  OTHours: $("#otHours").val(),
                  TransitWages: $("#Transitwages").val(),
                  TotalPayable: $("#TotalPayable").val(),
                  LeaveWagesCf: $("#LeaveWagesCf").val(),
                  AVC: $("#Avc").val(),
                  IsLeaveWagesCf: 0,
                  IsTransitApply: $("#IsTransitApply").val(),
                  IsPromoted: $("#IsPromoted").val(),
                  Gratuity: $("#Gratuity").val(),
                  IndPfamount: $("#IndPfamount").val(),
                  IsAddPrevBal: $("#IsAddPrevBal").val(),
                  IsHoldWageAllotment: $("#IsHoldWageAllotment").val(),
                  WHTdeduction: $("#whTdeduction").val(),
                  UDdeduction: $("#UDdeduction").val(),
                  WFdeduction: $("#wFdeduction").val(),
                  Tax: $("#tax").val(),
                  UDAmount: $("#udAmount").val(),
                  WFAmount: $("#wfAmount").val(),
                  LeaveWagesBF: $("#leaveWagesBF").val(),
                  Allotment2: $("#allotment2").val(),
                  SignOffDate: $("#signOffdate").val(),
              };
              console.log(portageBillVM)

              $.ajax({
                  url: "/Portagebill/AddPortageBill",
                  type: "POST",
                  data: portageBillVM,
                  dataType: 'json',
                  success: function (response) {
                      savebowbaksada();
                      savePortageEarningDeduction(portageBillVM.CrewId, portageBillVM.Vesselid, portageBillVM.From, portageBillVM.To, response);

                      alert("Bow data has been saved.");
                                  $('#bowmodel').modal('hide');
                              resetbowform();
                      var url = window.location.href;
                      location.reload(true);
                  }
              })
              // $.ajax({
              //     url: "/Portagebill/AddPortageBill",
              //     type: "POST",
              //     data: portageBillVM,
              //     dataType: 'json',
              //    // contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
              //     success: function (response) {
              //         debugger;
              //         console.log(response);
              //        // if (response == "success") {
              //             // $.each(selectbankids, function (k, v) {
              //             //     var selectedbankid = v;
              //             //     var model = "";
              //             //     if (k == 0) {
              //             //         model = {
              //             //             "BankAllotmentId": $('#pBankAllotmentId1').val(),
              //             //             "Crew": $('#CrewId').val(),
              //             //             "VesselId": $('#Vesselid').val(),
              //             //             'BankId': selectedbankid,
              //             //             "From": $('#From').val(),
              //             //             "To": $('#To').val(),
              //             //             'Allotments': $('#allotments').val(),
              //             //             "IsMidMonthAllotment": 0
              //             //         }
              //             //     }
              //             //     else {
              //             //         model = {
              //             //             "BankAllotmentId": $('#pBankAllotmentId2').val(),
              //             //             "Crew": $('#CrewId').val(),
              //             //             "VesselId": $('#Vesselid').val(),
              //             //             'BankId': selectedbankid,
              //             //             "From": $('#From').val(),
              //             //             "To": $('#To').val(),
              //             //             'Allotments': $('#allotment2').val(),
              //             //             "IsMidMonthAllotment": 0
              //             //         }
              //             //     }
              //             //     $.ajax({
              //             //         url: "/Portagebill/AddBankAllotment",
              //             //         type: "POST",
              //             //         dataType: 'json',
              //             //         contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
              //             //         data: { item: model, 'itemlength': selectbankids },
              //             //         success: function (resbankallotment) {
              //             //             //if (resbankallotment == "success") {
              //             //             debugger;
              //             //                savePortageEarningDeduction(portageBillVM.CrewId, portageBillVM.Vesselid, portageBillVM.From, portageBillVM.To, response);
              //             //                 $("#bowform").get(0).reset;
              //             //                 $('#bowmodel').modal('hide');

              //             //            // }
              //             //         },
              //             //         failure: function (resbankallotment) {
              //             //             alert(resbankallotment.responseText);
              //             //         },
              //             //         error: function (resbankallotment) {
              //             //             alert(resbankallotment.responseText);
              //             //         }
              //             //     });
              //             // });

              //         savebaksada();
              //         savePortageEarningDeduction(portageBillVM.CrewId, portageBillVM.Vesselid, portageBillVM.From, portageBillVM.To, response);


              //             //for (var i = 0; i < selectbankids; i++) {
              //             //    var selectedbankid = selectbankids[i];

              //             //    console.log(selectedbankid)
              //             //    var formData = new FormData();
              //             //    formData.append('CrewId', '1300');
              //             //    formData.append('Vesselid', $('#Vesselid').val());
              //             //    formData.append('BankId', selectedbankid);
              //             //    console.log(formData)
              //             //    $.ajax({
              //             //        url: "/Portagebill/AddBankAllotment",
              //             //        type: "POST",
              //             //        dataType: 'json',
              //             //        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
              //             //        data: { formData, 'itemlength': selectbankids },
              //             //        success: function (response) {
              //             //            if (response == "success") {
              //             //                $("#bowform").get(0).reset;
              //             //                $('#bowmodel').modal('hide');
              //             //            }
              //             //        },
              //             //        failure: function (response) {
              //             //            alert(response.responseText);
              //             //        },
              //             //        error: function (response) {
              //             //            alert(response.responseText);
              //             //        }
              //             //    });
              //             //}
              //             alert("Bow data has been saved.")
              //             $('#bowmodel').modal('hide');
              //             resetbowform();
              //             var url = window.location.href;
              //             location.reload(true);
              //         //}

              //     },
              //     failure: function (response) {
              //         alert(response.responseText);
              //     },
              //     error: function (response) {
              //         alert(response.responseText);
              //     }
              // });
          }

          function BankallotmentSubmit() {
              for (var i = 0; i < selectbankids; i++) {
                  var selectedbankid = selectbankids[i];
                  var formData = new FormData();
                  formData.append('CrewId', '1300');
                  formData.append('Vesselid', $('#Vesselid').val());
                  formData.append('BankId', selectedbankid);

                  $.ajax({
                      url: "/Portagebill/AddBankAllotment",
                      type: "POST",
                      dataType: 'json',
                      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                      data: { formData, 'itemlength': selectbankids },
                      success: function (response) {
                          if (response == "success") {
                              //resetportageform();
                              $('#bowmodel').modal('hide');
                          }
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              }
          }

          /* function to calculate on load of signoffdate slection */
          function calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, SpecialAllowance, CompanyAllowance, SecurityAllow, TempFuelAllow,OtherAllow, totaldays, numberofdays, transitwage, otherEarnings,
              IncentiveAllowance, Seniority, TankerAllowance, Housing, Transport, Utility, Bonus, SeafarersPF, leavepayaddition) {
              var total = (parseInt(basicwage) * totaldays / numberofdays) + (parseInt(FixedGtOT) * totaldays / numberofdays) + (parseInt(leavePay) * totaldays / numberofdays)
                  + (parseInt(UniformAllow) * totaldays / numberofdays) + (parseInt(PensionFund) * totaldays / numberofdays) + (parseInt(specialAllow) * totaldays / numberofdays)
                  + (parseInt(companyAllow) * totaldays / numberofdays) + (parseInt(securityAllow) * totaldays / numberofdays) + (parseInt(tempFuelAllow) * totaldays / numberofdays)
                  + (parseInt(OtherAllow) * totaldays / numberofdays) + parseInt(transitwage) +
                  + (parseInt(incentiveallow) * totaldays / numberofdays) + (parseInt(seniority) * totaldays / numberofdays) + (parseInt(tankerallow) * totaldays / numberofdays)
                  + (parseInt(housing) * totaldays / numberofdays) + (parseInt(transport) * totaldays / numberofdays) + (parseInt(utility) * totaldays / numberofdays)
                  + (parseInt(bonus) * totaldays / numberofdays) + (parseInt(seafarerspf) * totaldays / numberofdays) + (parseInt(leavepayaddition) * totaldays / numberofdays)
                  + parseInt(otherEarnings) + parseFloat(leaveWagesBF);
              return Math.round(total);
          }

          /* function to calculate ot with earning */
          function calculateot() {
              othour = $("#otHours").val() || 0;
              otearning = ((parseFloat(otrate)) * (parseFloat(othour)) || 0).toFixed(2);
              $("#extraot").val(otearning);
              transitDays = $("#transitDays").val() || 0;
              transitwage = (parseInt(basicwage) / numberofdays * transitDays).toFixed(2);
              $("#Transitwages").val(transitwage);
              otherEarnings = parseFloat($("#OtherEarnings").val() || 0);
              reimbursement = parseFloat($("#reimbursement").val() || 0);
              leaveWagesBF = parseFloat($("#leaveWagesBF").val() || 0);
              totalearning = Math.round(parseFloat(otearning) + (parseInt(basicwage) * days / numberofdays) + (parseInt(FixedGtOT) * days / numberofdays) + (parseInt(leavePay) * days / numberofdays)
                  + (parseInt(UniformAllow) * days / numberofdays) + (parseInt(PensionFund) * days / numberofdays) + (parseInt(securityAllow) * days / numberofdays) + (parseInt(specialAllow) * totaldays / numberofdays)
                  + (parseInt(companyAllow) * totaldays / numberofdays) + (parseInt(securityAllow) * totaldays / numberofdays) + (parseInt(tempFuelAllow) * totaldays / numberofdays)
                  + (parseInt(incentiveallow) * totaldays / numberofdays) + (parseInt(seniority) * totaldays / numberofdays) + (parseInt(tankerallow) * totaldays / numberofdays)
                  + (parseInt(housing) * totaldays / numberofdays) + (parseInt(transport) * totaldays / numberofdays) + (parseInt(utility) * totaldays / numberofdays)
                  + (parseInt(bonus) * totaldays / numberofdays) + (parseInt(seafarerspf) * totaldays / numberofdays) + (parseInt(leavepayaddition) * totaldays / numberofdays)
                  + (parseInt(OtherAllow) * days / numberofdays) + parseFloat(transitwage) + parseFloat(otherEarnings) + parseFloat(reimbursement) + parseFloat(leaveWagesBF));
              finalbal = Math.round(totalearning - totaldeduction);
              $("#totalpay").text(totalearning);
              $("#totaldeduc").text(totaldeduction);
              $("#finalbal").text(finalbal);
              $("#TotalPayable").val(totalearning);
              $("#TotalDeductions").val(totaldeduction);
              $("#FinalBalance").val(finalbal);
              $("#TotalEarnings").val(totalearning);
          }

          /* function to calculate the earning   */
          function calculateearning() {
              debugger;
              othour = $("#otHours").val() || 0;
              otearning = ((parseFloat(otrate)) * (parseFloat(othour)) || 0).toFixed(2);
              $("#extraot").val(otearning);
              otherEarnings = parseFloat($("#OtherEarnings").val() || 0);
              transitDays = $("#transitDays").val() || 0;
              transitwage = (parseInt(basicwage) / numberofdays * transitDays).toFixed(2);
              $("#Transitwages").val(transitwage);
              reimbursement = parseFloat($("#reimbursement").val() || 0);
              leaveWagesBF = parseFloat($("#leaveWagesBF").val() || 0);
              totalearning = Math.round( parseFloat(otearning) + (parseInt(basicwage) * days / numberofdays) + (parseInt(FixedGtOT) * days / numberofdays) + (parseInt(leavePay) * days / numberofdays)
                  + (parseInt(UniformAllow) * days / numberofdays) + (parseInt(PensionFund) * days / numberofdays) + (parseInt(specialAllow) * days / numberofdays)
                  + (parseInt(companyAllow) * days / numberofdays) + (parseInt(securityAllow) * days / numberofdays) + (parseInt(tempFuelAllow) * days / numberofdays)
                  + (parseInt(incentiveallow) * days / numberofdays) + (parseInt(seniority) * days / numberofdays) + (parseInt(tankerallow) * days / numberofdays)
                  + (parseInt(housing) * days / numberofdays) + (parseInt(transport) * days / numberofdays) + (parseInt(utility) * days / numberofdays)
                  + (parseInt(bonus) * days / numberofdays) + (parseInt(seafarerspf) * days / numberofdays) + (parseInt(leavepayaddition) * days / numberofdays)
                  + (parseInt(OtherAllow) * days / numberofdays) + parseFloat(transitwage) + parseFloat(otherEarnings) + parseFloat(reimbursement));
              //console.log((otearning || 0),(parseInt(basicwage) * days / numberofdays), (parseInt(FixedGtOT) * days / numberofdays), (parseInt(leavePay) * days / numberofdays)
              //    , (parseInt(UniformAllow) * days / numberofdays), (parseInt(PensionFund) * days / numberofdays), (parseInt(securityAllow) * days / numberofdays)
              //    , (parseInt(OtherAllow) * days / numberofdays), parseFloat(transitwage), parseFloat(otherEarnings), parseFloat(reimbursement));
              //console.log(totalearning - totaldeduction);
              if (leavewagesforward == true) {
                  totalearning = Math.round((totalearning - (parseInt(leavePay) * days / numberofdays)));
              }
              else {
                  bowtotalearning = Math.round((totalearning));
                  totalearning = Math.round((totalearning + leaveWagesBF));//
              }
              finalbal = Math.round(totalearning - totaldeduction);
              $("#totalpay").text(totalearning);
              $("#totaldeduc").text(totaldeduction);
              $("#finalbal").text(finalbal);
              $("#TotalPayable").val(totalearning);
              $("#TotalDeductions").val(totaldeduction);
              $("#FinalBalance").val(finalbal);
              $("#TotalEarnings").val(totalearning);
              calculatededuction();
              //ca = $("#cashAdvance").val();
              //bs = $("#bondedStores").val();
              //od = $("#otherDeductions").val();
              //allotment = parseFloat($("#allotments").val()) + parseFloat($("#allotment2").val());
              //console.log(parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment))
              //totaldeduction = (parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment));
              //finalbal = totalearning - totaldeduction;
              //this.calculatededuction();
              //$("#totalpayable").text(totalearning);
              //$("#totaldeduction").text(totaldeduction);
              //$("#finalbal").text(finalbal);
          }

          /* Its function to calculate the deduction  */
          function calculatededuction() {
              debugger;
              if (leavewagesforward  == true) {
                  $('#LeaveWagesCf').val((parseFloat($('#leaveWagesBF').val()) + (parseInt(leavePay) * days / numberofdays)).toFixed(2));
              }
              else {
                  $('#LeaveWagesCf').val(0);
              }
              if (currency == "NGN") {
                  ca = $("#cashAdvance").val() || 0;
                  bs = $("#bondedStores").val() || 0;
                  od = $("#otherDeductions").val() || 0;
                  allotment = parseFloat($("#allotments").val() || 0) + parseFloat($("#allotment2").val() || 0);
                  /* console.log(parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment))*/
                  totaldeduction = Math.round((parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(nigpfAmount) + parseFloat(allotment) + (parseFloat(bowtotalearning) * UDdeduction / 100) + (parseFloat(bowtotalearning) * WFdeduction / 100) + (parseFloat(leavePay) * days / numberofdays) + (parseFloat(bowtotalearning) * WHTdeduction / 100)));
                  udAmount = (parseFloat(bowtotalearning) * UDdeduction / 100);
                  wfAmount = (parseFloat(bowtotalearning) * WFdeduction / 100);
                  tax = (parseFloat(bowtotalearning) * WHTdeduction / 100);
                  $("#wfAmount").val(wfAmount);
                  $("#udAmount").val(udAmount);
                  $("#tax").val(tax);
              }
              else {
                  ca = $("#cashAdvance").val() || 0;
                  bs = $("#bondedStores").val() || 0;
                  od = $("#otherDeductions").val() || 0;
                  allotment = parseFloat($("#allotments").val() || 0) + parseFloat($("#allotment2").val() || 0);//$('#LeaveWagesCf').val()
                   if (leavewagesforward  == true) {
                  totaldeduction = Math.round((parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment) + (parseFloat(leavePay) * days / numberofdays) + parseFloat(authorityDeduction)));
              }
              else {
                   totaldeduction = Math.round((parseFloat(ca) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment) + parseFloat(authorityDeduction)));
              }
                 // console.log((parseFloat(ca), parseFloat(bs), parseFloat(od), parseFloat(allotment), parseFloat($('#LeaveWagesCf').val()), parseFloat(authorityDeduction)));
              }
              finalbal = Math.round(totalearning - totaldeduction);
              $("#totalpay").text(totalearning);
              $("#totaldeduc").text(totaldeduction);
              $("#finalbal").text(finalbal);
              $("#TotalPayable").val(totalearning);
              $("#TotalDeductions").val(totaldeduction);
              $("#FinalBalance").val(finalbal);
          }

          /* Jquery datepicker   */
          var jQDate = $.noConflict();
          jQDate(function () {
              jQDate("#signOffdate").datepicker({
              dateFormat: 'dd-mm-yy',
                  changeMonth: true,
                  changeYear: true,
              });
         });

          /* Bow generate pop
         on sifoof date slection fill the data
         */
          jQDate('#signOffdate').datepicker({
              dateFormat: 'dd-mm-yy',
              onSelect: function (dateText) {
                  var dateParts = dateText.split('-');
                 // console.log(Date.parseExact(dateText, 'yyyy-MM-dd'));
                  var signoffnewdate = dateParts[2] +'-'+ dateParts[1] +'-'+ dateParts[0];
                  console.log(signoffnewdate);
                  var CrewId = sessionStorage.getItem("crewid")
                  var crewListId = sessionStorage.getItem("CrewListId");
                  $.ajax({
                      type: "GET",
                      url: "/Portagebill/getBOWData",
                      data: { 'crewId': CrewId, 'crewListId': crewListId, 'signOffDate': signoffnewdate },
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      success: function (response) {
                          currency = (response[0].currency || 0);
                          from = response[0].from;
                          to = response[0].to;
                          basicwage = (response[0].basicWages || 0);
                          FixedGtOT = (response[0].fixedGtOT || 0);
                          leavePay = (response[0].leavePay || 0);
                          UniformAllow = (response[0].uniformAllow || 0);
                          PensionFund = (response[0].pensionFund || 0);

                          specialAllow = (response[0].SpecialAllowance || 0);
                          companyAllow = (response[0].CompanyAllowance || 0);
                          securityAllow = (response[0].SecurityAllow || 0);
                          tempFuelAllow = (response[0].TempFuelAllow || 0);

                          incentiveallow = (response[0].IncentiveAllowance || 0);
                          seniority = (response[0].Seniority || 0);
                          tankerallow = (response[0].TankerAllowance || 0);
                          housing = (response[0].Housing || 0);
                          transport = (response[0].Transport || 0);
                          utility = (response[0].Utility || 0);
                          bonus = seafarerspf = (response[0].Bonus || 0);
                          seafarerspf = seafarerspf = (response[0].SeafarersPF || 0);
                          leavepayaddition = (response[0].leavepayaddition || 0);

                          OtherAllow = (response[0].otherAllow || 0);
                          numberofdays = (response[0].numberofday || 0);
                          otherEarnings = (response[0].otherEarnings || 0);
                          reimbursement = (response[0].reimbursement || 0);
                          portageBillId = (response[0].portageBillId || 0);
                          appliedCBA = (response[0].appliedCBA || 0);
                          $("#AppliedCba").val(appliedCBA);
                          ca = (response[0].cashAdvance || 0);
                          bs = (response[0].bondedStores || 0);
                          od = (response[0].otherDeductions || 0);
                          allotment = (response[0].allotments || 0);
                          allotment2 = (response[0].otHours || 0);
                          othour = (response[0].otHours || 0);
                          extraot = (response[0].extraot || 0);
                          transitDays = (response[0].transitDays || 0);
                          transitwage = (response[0].transitWages || 0);
                          $("#Transitwages").val(transitwage);
                          avc = (response[0].avc || 0);
                          gratuity = (response[0].gratuity || 0);
                          indPFAmount = (response[0].gratuity || 0);
                          nigpfAmount = (response[0].pfAmount || 0);
                          $("#Avc").val(avc);
                          $("#Avc").val(avc);
                          $("#Gratuity").val(gratuity);
                          $("#IndPfamount").val(indPFAmount);
                          WHTdeduction = (response[0].whTdeduction || 0);
                          tax = (response[0].tax || 0);
                          UDdeduction = (response[0].uDdeduction || 0);
                          udAmount = (response[0].wfAmount || 0);
                          WFdeduction = (response[0].wFdeduction || 0);
                          wfAmount = (response[0].wfAmount || 0);
                          $("#CrewId").val((response[0].crewId || 0));
                          $("#CrewListId").val((response[0].crewListId || 0));
                          $("#ContractId").val((response[0].contractId || 0));
                          $("#PortageBillId").val((response[0].portageBillId || 0));
                          $("#From").val((response[0].from || 0));
                          $("#To").val((response[0].to || 0));
                          $("#Days").val((response[0].totalDays || 0));
                          $("#Vesselid").val((response[0].vesselid || 0));
                          if (portageBillId == 0) {
                              $("#cashAdvance").val(0);
                              $("#bondedStores").val(0);
                              $("#otherDeductions").val(0);
                              $("#allotments").val(0); $("#allotment2").val(0);
                              $("#otHours").val(0);
                              $("#extraot").val(0);
                              $("#OtherEarnings").val(otherEarnings);
                              $("#transitDays").val(0);
                              $("#reimbursement").val(reimbursement);
                          }
                          else {
                              //ca = (response[0].cashAdvance || 0);
                              //bs = (response[0].bondedStores || 0);
                              //od = (response[0].otherDeductions || 0);
                              //allotment = (response[0].allotments || 0);
                              //allotment2 = (response[0].otHours || 0);
                              $("#cashAdvance").val(ca);
                              $("#bondedStores").val(bs);
                              $("#otherDeductions").val(od);
                              $("#allotments").val(allotment);
                              $("#otHours").val(othour);
                              $("#extraot").val(extraot);
                              $("#OtherEarnings").val(otherEarnings);
                              $("#transitDays").val(transitDays);
                              $("#reimbursement").val(reimbursement);
                          }
                          otrate = (response[0].otrate || 0);
                          prevMonthBal = (response[0].prevMonthBal || 0);
                          transitwage = (response[0].transitwage || 0);
                          days = (response[0].totalDays || 0);
                          authorityDeduction = (response[0].authorityDeduction || 0);
                          leaveWagesBF = (response[0].leaveWagesBF || 0);
                          $("#leaveWagesBF").val(leaveWagesBF);
                          /*console.log(basicwage, ca, bs, od, allotment);*/
                          /*console.log(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, securityAllow, OtherAllow, days, numberofdays, transitwage, otherEarnings);*/
                          totalearning = calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, specialAllow, companyAllow, securityAllow, tempFuelAllow, OtherAllow, days, numberofdays,
                              transitwage, otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf, leavepayaddition);
                          totaldeduction = (ca + bs + od + allotment);
                          $("#totalpay").text(totalearning);
                          $("#totaldeduc").text(totaldeduction);
                          $("#finalbal").text(finalbal);
                          $("#TotalPayable").val(totalearning);
                          $("#TotalDeductions").val(totaldeduction);
                          $("#FinalBalance").val(finalbal);

                          //var crewlistid = $("#CrewListId").val();
                          //$.ajax({
                          //    type: "GET",
                          //    url: "/Portagebill/getBowRequest",
                          //    data: { 'crewListId': crewlistid },
                          //    contentType: "application/json; charset=utf-8",
                          //    dataType: "json",
                          //    success: function (bowreqdata) {
                          //        if (bowreqdata.leaveWagesCarry == 'Yes') {
                          //            leavewagesforward = true;
                          //            $("#IsLeaveWagesCF").prop('checked', true);
                          //        }
                          //        else {
                          //            $("#IsLeaveWagesCF").prop('checked', false); leavewagesforward = false;
                          //        }
                          //        console.log(leavewagesforward);
                          //    },
                          //})
                          calculateearning();
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              }
          });

          /* reset bow form data
        */
          function resetbowform() {
              $("#bowform").trigger("reset");
              debugger;
              $("#signOffdate").val("");
              $("#PortageBillId").val(0);
              $("#From").val(0);
              $("#To").val(0);
              $("#Vesselid").val(0);
              $("#OTHours").val(0);
              $("#Days").val(0);
              $("#extraot").val(0);
              $("#Bankid").val(0);
              $("#AppliedCba").val(0);
              $("#CrewId").val(0);
              $("#CrewListId").val(0);
              $("#ContractId").val(0);
              $("#TotalDeductions").val(0);
              $("#FinalBalance").val(0);
              $("#OtherEarnings").val(0);
              $("#reimbursement").val(0);
              $("#cashAdvance").val(0);
              $("#bondedStores").val(0);
              $("#otherDeductions").val(0);
              $("#allotments").val(0);
              $("#allotment2").val(0);
              $("#LeaveWagesBf").val(0);
              $("#totalearncurrent").val(0);
              $("#remarks").val(0);
              $("#transitDays").val(0);
              $("#otHours").val(0);
              $("#TotalPayable").val(0);
              $("#LeaveWagesCf").val(0);
              $("#Avc").val(0);
              $("#IsLeaveWagesCf").val(0);
              $("#IsTransitApply").val(0);
              $("#IsPromoted").val(0);
              $("#Gratuity").val(0);
              $("#IndPfamount").val(0);
              $("#IsAddPrevBal").val(0);
              $("#IsHoldWageAllotment").val(0);
              $("#whTdeduction").val(0);
              $("#UDdeduction").val(0);
              $("#wFdeduction").val(0);
              $("#tax").val(0);
              $("#udAmount").val(0);
              $("#wfAmount").val(0);
              $("#leaveWagesBF").val(0);
              $("#allotment2").val(0);
              $("#transitWages").val(0);
              $("#prevMonthBal").val(0);
              $("#totalpay").text(0);
              $("#totaldeduc").text(0);
              $("#finalbal").text(0);
          }
          var PortageBillIdglobal = 0;

          /* portage entry pop get data */
          function onsignersdata(npfamount,crewname, rank, curr, PortageBillId, ContractId, CrewId, CrewListId, From, To, TotalDays, BasicWages, fixott, LeavePay, uniformallow, pensionfund,
              SpecialAllowance, CompanyAllowance, SecurityAllow, TempFuelAllow, IncentiveAllowance, Seniority, TankerAllowance, Housing, Transport, Utility, Bonus, SeafarersPF, leavepayaddition, otherallow,
              Reimbursement, Contractreimbrusment, Contractbonus, Contractdedu,
              OTHours, OtRate, uddeduction, wfdeduction, whtdeduction, Gratuity, IndPFAmount, AVC, numberofday, transitwages, OtherEarnings, vesselid, leaveWagesbf, cbaid, prevmonthbal, midmonthallotment, onboard, AuthorityDeduction, paycommence, signondate) {
                  debugger
              nigpfAmount= npfamount;
              $("#poratgeallotment2").hide();
              $("#pcrewrank").text(rank);
              $("#pcrewname").text(crewname);
              currency = curr;
              crewstatus = onboard;
              $("#pcurrency").text(currency);
              $("#portageBillPopup").modal('show');
              var vid = $('#vesselid').val();
              var month = $('#month').val();
              var year = $('#year').val();
              UDdeduction = uddeduction;
              WFdeduction = wfdeduction;
              WHTdeduction = whtdeduction;
              $("#pwhTdeduction").val(WHTdeduction);
              $("#pUDdeduction").val(UDdeduction);
              $("#pwFdeduction").val(WFdeduction);
              $("#psignondate").val(signondate);
              $("#ppaycommence").val(paycommence);
              prevMonthBal = prevmonthbal;
              $("#pprevMonthBal").val(prevMonthBal);
              $.ajax({
                  type: "GET",
                  url: "/Portagebill/GetCrewBankDetails",
                  data: { 'crewId': CrewId },
                  contentType: "application/json; charset=utf-8",
                  dataType: "json",
                  success: function (response) {
                      $("#pcrewbank").empty();
                      var table = $('<table></table>');
                      $(response).each(function (index, item) {
                          var i = parseInt(index) + 1;
                          table.append($('<tr></tr>')
                              .append($('<td style="width: 100%;"></td>')
                                  .append($('<input style="float: left;" onchange="getportagebillbankid()">').attr({
                                      'id': 'chk' + i,
                                      'type': 'checkbox',
                                      'name': 'pbankid',
                                      'value': item.crewBankDetailsId
                                  }))
                                  .append($("<label style='float: right;width:97%'>").attr(
                                      {
                                          'for': 'chk' + i
                                      })
                                      .text(item.fulldetail))
                          ));

                      });
                      $('#pcrewbank').append(table);
                      GetContractDataOfEarnings();
                      GetContractDataOfDeductions();
                      GetContractDataOfReimbursement();
                      },
                  failure: function (response) {
                      alert(response.responseText);
                  },
                  error: function (response) {
                      alert(response.responseText);
                  }
              });
              debugger
              if (PortageBillId != 0 && PortageBillId != '') {

                  PortageBillIdglobal = PortageBillId;

                  $.ajax({
                      type: "GET",
                      url: "/Portagebill/GetDataByPoratgeId",
                      data: { 'portageid': PortageBillId, 'crewid': CrewId },
                      contentType: "application/json; charset=utf-8",
                      dataType: "json",
                      success: function (response) {
                          debugger
                          from = response.from;
                          to = response.to;
                          basicwage = (BasicWages || 0);
                          FixedGtOT = (fixott || 0);
                          leavePay = (LeavePay || 0);
                          UniformAllow = (uniformallow || 0);
                          PensionFund = (pensionfund || 0);
                          specialAllow = (SpecialAllowance || 0);
                          companyAllow = (CompanyAllowance || 0);
                          securityAllow = (SecurityAllow || 0);
                          tempFuelAllow = (TempFuelAllow || 0);

                          incentiveallow = (IncentiveAllowance || 0);
                          seniority = (Seniority || 0);
                          tankerallow = (TankerAllowance || 0);
                          housing = (Housing || 0);
                          transport = (Transport || 0);
                          utility = (Utility || 0);
                          bonus = (Bonus || 0);
                          seafarerspf = (SeafarersPF || 0);
                          leavepayaddition = (leavepayaddition || 0);
                          contractreimbrusment = (Contractreimbrusment || 0);
                          contractbonus = (Contractbonus || 0);
                          contractdedu = (Contractdedu || 0);

                          OtherAllow = (otherallow || 0);
                          numberofdays = (numberofday || 0);
                          otherEarnings = (response.otherEarnings || 0);
                          reimbursement = (response.reimbursement || 0);
                          portageBillId = (response.portageBillId || 0);
                          appliedCBA = (response.appliedCBA || 0);
                          ca = (response.cashAdvance || 0);
                          bs = (response.bondedStores || 0);
                          od = (response.otherDeductions || 0);
                          //allotment = (response.allotments || 0);
                          //allotment2 = (response.otHours || 0);
                          //othour = (response.otHours || 0);
                          //extraot = (response.extraot || 0);
                          transitDays = (response.transitDays || 0);
                          avc = (response.avc || 0);
                          gratuity = (response.gratuity || 0);
                          indPFAmount = (response.gratuity || 0);
                          $("#pAvc").val(avc);
                          $("#pGratuity").val(gratuity);
                          $("#pIndPfamount").val(indPFAmount);
                          midmonthallotment = (response.midmonthallotment || 0);
                         // WHTdeduction = (response.whTdeduction || 0);
                          tax = (response.tax || 0);
                         // UDdeduction = (response.uDdeduction || 0);
                          udAmount = (response.udamount || 0);
                         // WFdeduction = (response.wFdeduction || 0);
                          wfAmount = (response.wfamount || 0);
                          othour = (response.othours || 0);
                          otearning = (response.extraOt || 0);
                          $("#potHours").val(othour);
                          $("#pextraot").val(otearning);
                          $("#ptax").val(tax);
                          $("#pudAmount").val(udAmount);
                          $("#pwfAmount").val(wfAmount);
                          $("#pCrewId").val((response.crewId || 0));
                          $("#pCrewListId").val((response.crewListId || 0));
                          $("#pmidmonthallotment").val(midmonthallotment);
                          $("#pContractId").val((response.contractId || 0));
                          $("#pPortageBillId").val(portageBillId);
                          $("#pFrom").val((response.from || 0));
                          $("#pTo").val((response.to || 0));
                          $("#pDays").val((response.days || 0));
                          $("#pVesselid").val((response.vesselid || 0));

                          //if (portageBillId == 0) {
                          //    $("#pcashAdvance").val(0);
                          //    $("#pbondedStores").val(0);
                          //    $("#potherDeductions").val(0);
                          //    $("#pallotments").val(0); $("#allotment2").val(0);
                          //    $("#potHours").val(0);
                          //    $("#pextraot").val(0);
                          //    $("#pearningother").val(otherEarnings);
                          //    $("#ptransitDays").val(0);
                          //    $("#preimbursement").val(reimbursement);
                          //}
                          //else {
                              $("#pcashAdvance").val(ca);
                              $("#pbondedStores").val(bs);


                              $("#pearningother").val(otherEarnings);
                              $("#ptransitDays").val(transitDays);
                              $("#preimbursement").val(reimbursement);
                          //}
                          otrate = OtRate;
                          transitwage = (response.transitwage || 0);
                          days = (response.days || 0);
                          authorityDeduction = AuthorityDeduction;
                          leaveWagesBF = (response.leaveWagesBf || 0);
                          $("#pleaveWagesBF").val(leaveWagesBF);
                          totalearncurrent = calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund,specialAllow,companyAllow, securityAllow,tempFuelAllow, OtherAllow, days, numberofdays, transitwage,
                              otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf,leavepayaddition);
                          console.log(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, specialAllow, companyAllow, securityAllow, tempFuelAllow, OtherAllow, days, numberofdays, transitwage,
                              otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf, leavepayaddition);
                          console.log(totalearncurrent)
                          totalearning = (response.totalPayable || 0);
                          totaldeduction = (response.totalDeductions || 0);
                          finalbal = (response.finalBalance || 0);
                          $("#premarks").val(response.remarks);
                          remarks = response.remarks;
                          $("#ptotalpay").text(totalearning);
                          $("#ptotaldeduc").text(totaldeduction);
                          $("#pfinalbal").text(finalbal);
                          $("#pTotalPayable").val(totalearning);
                          $("#pTotalDeductions").val(totaldeduction);
                          $("#pFinalBalance").val(finalbal);
                          $("#ptotalearncurrent").val(totalearncurrent);
                          $.ajax({
                              type: "GET",
                              url: "/Portagebill/GetBankAllotment",
                              data: { 'vesselId': vid, 'month': month, 'year': year, 'crewid': CrewId, 'ispromoted': 'no' },
                              contentType: "application/json; charset=utf-8",
                              dataType: "json",
                              success: function (bankallormentdetail) {
                                  if (bankallormentdetail.length == 1) {
                                      selectbankids = [bankallormentdetail[0].bankId]
                                      $("#pallotments").val(bankallormentdetail[0].allotments);
                                      $("#pBankAllotmentId1").val(bankallormentdetail[0].bankAllotmentId);
                                      $('input[name=pbankid][value="' + bankallormentdetail[0].bankId + '"]').prop('checked', true);
                                  }
                                  else if (bankallormentdetail.length >= 2) {
                                      selectbankids = [bankallormentdetail[0].bankId, bankallormentdetail[1].bankAllotmentId]
                                      $("#pallotments").val(bankallormentdetail[0].allotments);
                                      $("#pBankAllotmentId1").val(bankallormentdetail[0].bankAllotmentId);
                                      $('input[name=pbankid][value="' + bankallormentdetail[0].bankId + '"]').prop('checked', true);
                                      $("#pallotment2").val(bankallormentdetail[1].allotments);
                                      $("#poratgeallotment2").show();
                                      $('input[name=pbankid][value="' + bankallormentdetail[1].bankId + '"]').prop('checked', true);
                                      $("#pBankAllotmentId2").val(bankallormentdetail[1].bankAllotmentId);
                                  }
                              },
                          })
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              }

    else {
                  numberofdays = numberofday;
                  basicwage = BasicWages;
                  FixedGtOT = fixott;
                  securityAllow = SecurityAllow;
                  leavePay = LeavePay;
                  UniformAllow = uniformallow;
                  PensionFund = pensionfund;

                  specialAllow = (SpecialAllowance || 0);
                  companyAllow = (CompanyAllowance || 0);
                  securityAllow = (SecurityAllow || 0);
                  tempFuelAllow = (TempFuelAllow || 0);
                  reimbursement = (Reimbursement || 0);
                  incentiveallow = (IncentiveAllowance || 0);
                  seniority = (Seniority || 0);
                  tankerallow = (TankerAllowance || 0);
                  housing = (Housing || 0);
                  transport = (Transport || 0);
                  utility = (Utility || 0);
                  bonus = (Bonus || 0);
                  seafarerspf = (SeafarersPF || 0);
                  leavepayaddition = (leavepayaddition || 0);
                  contractreimbrusment = (Contractreimbrusment || 0);
                  contractbonus = (Contractbonus || 0);
                  contractdedu = (Contractdedu || 0);
                  OtherAllow = otherallow;
                  authorityDeduction = AuthorityDeduction;
                 // numberofdays = OTHours;
                  otrate = OtRate;
                  //UDdeduction = UDdeduction;
                  //WFdeduction = WFdeduction;
                  //WHTdeduction = WHTdeduction;
                  gratuity = Gratuity;
                  indPFAmount = IndPFAmount;
                  avc = AVC;
                  days = TotalDays;
                  transitwage = transitwages;
                  $("#pTransitwages").val(transitwage);
                  appliedCBA = cbaid;
                  otherEarnings = OtherEarnings;
                  leaveWagesBF = leaveWagesbf;
                  totalearning = calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund,specialAllow,companyAllow, securityAllow,tempFuelAllow, OtherAllow, days, numberofdays, transitwage,
                      otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf, leavepayaddition);
                  // totalearncurrent = calculateStuff(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, specialAllow, companyAllow, securityAllow, tempFuelAllow, OtherAllow, days, numberofdays, transitwage,
                  //     otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf, leavepayaddition);
                  // console.log(basicwage, FixedGtOT, leavePay, UniformAllow, PensionFund, specialAllow, companyAllow, securityAllow, tempFuelAllow, OtherAllow, days, numberofdays, transitwage,
                  //     otherEarnings, incentiveallow, seniority, tankerallow, housing, transport, utility, bonus, seafarerspf, leavepayaddition);
                  // console.log(totalearncurrent)
                  $("#pearningother").val(otherEarnings);
                  $("#potherDeductions").val(od);
                  $("#preimbursement").val(reimbursement);
                  $("#pleaveWagesBF").val(leaveWagesBF);
                  $("#pCrewListId").val(CrewListId);
                  $("#pmidmonthallotment").val(midmonthallotment);
                  $("#pContractId").val(ContractId);
                  $("#pPortageBillId").val(PortageBillId);
                  $("#pFrom").val(From);
                  $("#pCrewId").val(CrewId);
                  $("#pTo").val(To);
                  $("#pDays").val(TotalDays);
                  $("#pVesselid").val(vesselid);
                  //$("#pwhTdeduction").val(WHTdeduction);
                  //$("#pUDdeduction").val(UDdeduction);
                  //$("#pwFdeduction").val(WFdeduction);
                  $("#pAvc").val(avc);
                  $("#pGratuity").val(gratuity);
                  $("#pIndPfamount").val(indPFAmount);
                  $("#pAppliedCba").val(appliedCBA),
                  $("#ptotalearncurrent").val(totalearncurrent);
                  calculateportageearning();
              }
              PortageReimbursementDetailsbyidWithoutType();
          }



          /* function to reset portage form values */
          function resetportageform() {
              $("#pPortageBillId").val(0);
                  $("#pFrom").val(0);
                  $("#pTo").val(0);
              $("#pVesselid").val(0);
              $("#pmidmonthallotment").val(0);
                   $("#pOTHours").val(0);
                 $("#pDays").val(0);
                 $("#pextraot").val(0);
                 $("#pBankid").val(0);
                 $("#pAppliedCba").val(0);
                  $("#pCrewId").val(0);
                   $("#pCrewListId").val(0);
                  $("#pContractId").val(0);
                 $("#pTotalDeductions").val(0);
                  $("#pFinalBalance").val(0);
                   $("#pearningother").val(0);
                  $("#preimbursement").val(0);
                 $("#pcashAdvance").val(0);
                  $("#pbondedStores").val(0);
                   $("#potherDeductions").val(0);
              $("#pallotments").val(0);
              $("#pallotment2").val(0);
                   $("#pLeaveWagesBf").val(0);
                   $("#ptotalearncurrent").val(0);
                   $("#premarks").val(0);
                   $("#ptransitDays").val(0);
                   $("#potHours").val(0);
                   $("#pTotalPayable").val(0);
                   $("#pLeaveWagesCf").val(0);
                   $("#pAvc").val(0);
                   $("#pIsLeaveWagesCf").val(0);
                   $("#pIsTransitApply").val(0);
                   $("#pIsPromoted").val(0);
                   $("#pGratuity").val(0);
                  $("#pIndPfamount").val(0);
                  $("#pIsAddPrevBal").val(0);
                  $("#pIsHoldWageAllotment").val(0);
                  $("#pwhTdeduction").val(0);
                  $("#pUDdeduction").val(0);
                   $("#pwFdeduction").val(0);
                  $("#ptax").val(0);
                  $("#pudAmount").val(0);
                  $("#pwfAmount").val(0);
                 $("#pleaveWagesBF").val(0);
              $("#pallotment2").val(0);
              $("#transitWages").val(0);
              $("#pprevMonthBal").val(0);
              location.reload();
          }

          /* function to get the portagebill selected bankid */
          function getportagebillbankid() {
              selectbankids = [];
              $('input[name=pbankid]').each(function (index, item) {
                  if ($(this).is(":checked")) {
                      selectbankids.push($(this).val());
                  }
                  else {
                      removeVal(selectbankids, $(this).val());
                  }
              });
              if (selectbankids.length > 1)
                  $("#poratgeallotment2").show();
              else {
                  $("#poratgeallotment2").hide(); $("#pallotment2").val(0);
              }
              calculateportageearning();
          }
          function removeVal(arr, val) {
              for (var i = 0; i < arr.length; i++) {
                  if (arr[i] == val)
                      arr.splice(i, 1);
              }
          }

          /* Add and update the monthly portage allotment */
          $("#saveportagedata").click(function () {
              var rmark = $("#premarks").val();
             // console.log(selectbankids, selectbankids.length);
              if (selectbankids.length == 0) {
                  alert("Please select the bank account for allotment")
                  return false;
              }
              if (totalearning != totaldeduction && rmark == "") {
                  alert("Total earning & deduction is not same. Balance is there. Please enter remark");
                  return false;
              }
              $("#portageform").valid();
              if (!$("#portageform").valid()) {
                  return false;
              }
              else {
                  if (totalearning != totaldeduction) {
                      prevMonthBal = parseFloat($("#pTotalPayable").val()) - parseFloat($("#pTotalDeductions").val());
                  }
                  var portageBillVM = {
                      PortageBillId: $("#pPortageBillId").val(),
                      From: $("#pFrom").val(),
                      To: $("#pTo").val(),

                      Vesselid: $("#pVesselid").val(),
                      Othours: $("#pOTHours").val(),
                      Days: $("#pDays").val(),
                      PrevMonthBal: prevMonthBal,
                      ExtraOt: $("#pextraot").val(),
                      BankId: $("#pBankid").val(),
                      AppliedCba: $("#pAppliedCba").val(),
                      CrewId: $("#pCrewId").val(),
                      CrewListId: $("#pCrewListId").val(),
                      ContractId: $("#pContractId").val(),
                      TotalDeductions: $("#pTotalDeductions").val(),
                      FinalBalance: $("#pFinalBalance").val(),
                      OtherEarnings: $("#pearningother").val(),
                      Reimbursement: $("#preimbursement").val(),
                      CashAdvance: $("#pcashAdvance").val(),
                      BondedStores: $("#pbondedStores").val(),
                      OtherDeductions: $("#potherDeductions").val(),
                      Allotments: parseFloat($("#pallotments").val()) + parseFloat($("#pallotment2").val()),
                      LeaveWagesBf: $("#pLeaveWagesBf").val(),
                      TotalEarnings: $("#ptotalearncurrent").val(),

              /*        Remarks: pp,*/

                      Remarks: $("#premarks").val(),
                      TransitDays: $("#ptransitDays").val(),
                      OTHours: $("#potHours").val(),
                      TransitWages: $("#pTransitwages").val(),
                      TotalPayable: $("#pTotalPayable").val(),
                      LeaveWagesCf: $("#pLeaveWagesCf").val(),
                      AVC: $("#pAvc").val(),
                      IsLeaveWagesCf: 0,
                      IsTransitApply: $("#pIsTransitApply").val(),
                      IsPromoted: $("#pIsPromoted").val(),
                      Gratuity: $("#pGratuity").val(),
                      IndPfamount: $("#pIndPfamount").val(),
                      IsAddPrevBal: $("#pIsAddPrevBal").val(),
                      IsHoldWageAllotment: $("#pIsHoldWageAllotment").val(),
                      WHTdeduction: $("#pwhTdeduction").val(),
                      UDdeduction: $("#pUDdeduction").val(),
                      WFdeduction: $("#pwFdeduction").val(),
                      Tax: $("#ptax").val(),
                      UDAmount: $("#pudAmount").val(),
                      WFAmount: $("#pwfAmount").val(),
                      LeaveWagesBF: $("#pleaveWagesBF").val(),
                      Allotment2: $("#pallotment2").val(),
                  };
                  debugger;

                  $.ajax({
                      url: "/Portagebill/AddPortageBill",
                      type: "POST",
                      data: portageBillVM,
                      dataType: 'json',
                      success: function (response) {
                          savebaksada();
                          savePortageEarningDeduction(portageBillVM.CrewId, portageBillVM.Vesselid, portageBillVM.From, portageBillVM.To, response);

                          alert('Portage Bill Updated');
                          $('#portageBillPopup').modal('hide');
                          resetportageform();
                          var url = window.location.href;
                          location.reload(true);
                      }
                  })
              }
          })

          function savebaksada() {
              $.each(selectbankids, function (k, v) {
                  var selectedbankid = v;
                  var model = "";
                  if (k == 0) {
                      model = {
                          "BankAllotmentId": $('#pBankAllotmentId1').val(),
                          "Crew": $('#pCrewId').val(),
                          "VesselId": $('#pVesselid').val(),
                          'BankId': selectedbankid,
                          "From": $('#pFrom').val(),
                          "To": $('#pTo').val(),
                          'Allotments': $('#pallotments').val(),
                          "IsMidMonthAllotment": 0
                      }
                  }
                  else {
                      model = {
                          "BankAllotmentId": $('#pBankAllotmentId2').val(),
                          "Crew": $('#pCrewId').val(),
                          "VesselId": $('#pVesselid').val(),
                          'BankId': selectedbankid,
                          "From": $('#pFrom').val(),
                          "To": $('#pTo').val(),
                          'Allotments': $('#pallotment2').val(),
                          "IsMidMonthAllotment": 0
                      }
                  }
                  $.ajax({
                      url: "/Portagebill/AddBankAllotment",
                      type: "POST",
                      dataType: 'json',
                      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                      data: { item: model, 'itemlength': selectbankids },
                      success: function (response) {
                          if (response == "success") {

                          }
                      },
                      failure: function (response) {
                          alert(response.responseText);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              });
          }


          function savePortageEarningDeduction(CrewId, Vesselid, From, To, portageBillId) {
              var model = "";
                  var currency = '';
              if (allotmenttype == 'bow') {
                   currency = document.getElementById("currency").innerText;
              }
              else {
                   currency = document.getElementById("pcurrency").innerText;
              }
              const mergedArray = mm.concat(oo, uppOtherdeduction);
              if (mergedArray.length > 0) {
                  mergedArray.forEach(entry => {
                      if (entry.portageEarningDeductionId > 0) {
                          model = { "SubCodeId": entry.subCode, "portageEarningDeductionId": entry.portageEarningDeductionId, "Type": entry.type, "Amount": entry.Amount, "CrewId": CrewId, "VesselId": Vesselid, "From": From, "To": To, "PortageBillId": portageBillId, "Currency": currency }
                          $.ajax({
                              url: "/Portagebill/AddPortageEarningDeduction",
                              type: "POST",
                              dataType: 'json',
                              contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                              data: { item: model },
                              success: function (response) {
                                  if (response == "success") {

                                  }
                              },
                              failure: function (response) {
                                  alert(response.responseText);
                              },
                              error: function (response) {
                                  alert(response.responseText);
                              }
                          });
                      }
                      if (entry.portageEarningDeductionId == 0 || entry.portageEarningDeductionId == undefined) {

                          model = { "SubCodeId": entry.subCode, "portageEarningDeductionId": 0, "Type": entry.type, "Amount": entry.Amount, "CrewId": CrewId, "VesselId": Vesselid, "From": From, "To": To, "PortageBillId": portageBillId, "Currency": currency }
                          $.ajax({
                              url: "/Portagebill/AddPortageEarningDeduction",
                              type: "POST",
                              dataType: 'json',
                              contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                              data: { item: model },
                              success: function (response) {
                                  if (response == "success") {

                                  }
                              },
                              failure: function (response) {
                                  alert(response.responseText);
                              },
                              error: function (response) {
                                  alert(response.responseText);
                              }
                          });
                      }
                  }

                  )
              }
          }




          function savebowbaksada() {
              $.each(selectbankids, function (k, v) {
                  var selectedbankid = v;
                  var model = "";
                  if (k == 0) {
                      model = {
                          "BankAllotmentId": $('#BankAllotmentId1').val(),
                          "Crew": $('#CrewId').val(),
                          "VesselId": $('#Vesselid').val(),
                          'BankId': selectedbankid,
                          "From": $('#From').val(),
                          "To": $('#To').val(),
                          'Allotments': $('#allotments').val(),
                          "IsMidMonthAllotment": 0
                      }
                  }
                  else {
                      model = {
                          "BankAllotmentId": $('#BankAllotmentId2').val(),
                          "Crew": $('#CrewId').val(),
                          "VesselId": $('#Vesselid').val(),
                          'BankId': selectedbankid,
                          "From": $('#From').val(),
                          "To": $('#To').val(),
                          'Allotments': $('#allotment2').val(),
                          "IsMidMonthAllotment": 0
                      }
                  }
                  $.ajax({
                      url: "/Portagebill/AddBankAllotment",
                      type: "POST",
                      dataType: 'json',
                      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                      data: { item: model, 'itemlength': selectbankids },
                      success: function (resbankallotment) {

                      },
                      failure: function (resbankallotment) {
                          alert(resbankallotment.responseText);
                      },
                      error: function (resbankallotment) {
                          alert(resbankallotment.responseText);
                      }
                  });
              });
          }


          /* function to calculate ot with earning */
          function calculateportageot() {
              othour = $("#potHours").val() || 0;
              otearning = ((parseFloat(otrate)) * (parseFloat(othour)) || 0).toFixed(2);
              $("#pextraot").val(otearning);
              transitDays = $("#ptransitDays").val() || 0;
              if (crewstatus =="onboard")
                  transitwage = transitwage
              else
                  transitwage = (parseInt(basicwage) / numberofdays * transitDays).toFixed(2);
              otherEarnings = parseFloat($("#pearningother").val() || 0);
              reimbursement = parseFloat($("#preimbursement").val() || 0);

              totalearning = Math.round(parseFloat(otearning)+(parseInt(basicwage) * days / numberofdays) + (parseInt(FixedGtOT) * days / numberofdays) + (parseInt(leavePay) * days / numberofdays)
                  + (parseInt(UniformAllow) * days / numberofdays) + (parseInt(PensionFund) * days / numberofdays)
                  + (parseInt(SpecialAllowance) * days / numberofdays) + (parseInt(CompanyAllowance) * days / numberofdays) + (parseInt(securityAllow) * days / numberofdays)
                  + (parseInt(TempFuelAllow) * days / numberofdays)
                  + (parseInt(IncentiveAllowance) * days / numberofdays) + (parseInt(Seniority) * days / numberofdays) + (parseInt(TankerAllowance) * days / numberofdays)
                  + (parseInt(Housing) * days / numberofdays) + (parseInt(Transport) * days / numberofdays) + (parseInt(Utility) * days / numberofdays)
                  + (parseInt(Bonus) * days / numberofdays) + (parseInt(SeafarersPF) * days / numberofdays) + (parseInt(leavepayaddition) * days / numberofdays)
                  + (parseInt(OtherAllow) * days / numberofdays) + parseFloat(prevMonthBal) + parseFloat(transitwage) + parseFloat(otherEarnings) + parseFloat(reimbursement));
              finalbal = Math.round(totalearning - totaldeduction);
              $("#ptotalpay").text(totalearning);
              $("#ptotaldeduc").text(totaldeduction);
              $("#pfinalbal").text(finalbal);
              $("#pTotalPayable").val(totalearning);
              $("#pTotalDeductions").val(totaldeduction);
              $("#pFinalBalance").val(finalbal);
          }

          /* function to calculate the earning   */
          function calculateportageearning() {
              debugger
              othour = $("#potHours").val() || 0;
              otearning = ((parseFloat(otrate)) * (parseFloat(othour)) || 0).toFixed(2);
              $("#pextraot").val(otearning);
              otherEarnings = parseFloat($("#pearningother").val() || 0);
              transitDays = $("#ptransitDays").val() || 0;
              if (crewstatus == "onboard")
                  transitwage = transitwage
              else
              transitwage = (parseInt(basicwage) / numberofdays * transitDays).toFixed(2);
              reimbursement = parseFloat($("#preimbursement").val() || 0);
              totalearning = Math.round(parseFloat(otearning) + (parseInt(basicwage) * days / numberofdays) + (parseInt(FixedGtOT) * days / numberofdays) + (parseInt(leavePay) * days / numberofdays)
                  + (parseInt(UniformAllow) * days / numberofdays) + (parseInt(PensionFund) * days / numberofdays) + (parseInt(specialAllow) * days / numberofdays)
                  + (parseInt(companyAllow) * days / numberofdays) + (parseInt(securityAllow) * days / numberofdays) + (parseInt(tempFuelAllow) * days / numberofdays)
                  + (parseInt(incentiveallow) * days / numberofdays) + (parseInt(seniority) * days / numberofdays) + (parseInt(tankerallow) * days / numberofdays)
                  + (parseInt(housing) * days / numberofdays) + (parseInt(transport) * days / numberofdays) + (parseInt(utility) * days / numberofdays)
                  + (parseInt(bonus) * days / numberofdays) + (parseInt(seafarerspf) * days / numberofdays) + (parseInt(leavepayaddition) * days / numberofdays)
                  + parseFloat(prevMonthBal)   + (parseInt(OtherAllow) * days / numberofdays) + parseFloat(transitwage) + parseFloat(otherEarnings) + parseFloat(reimbursement));
              //console.log((otearning || 0) ,(parseInt(basicwage) * days / numberofdays), (parseInt(FixedGtOT) * days / numberofdays), (parseInt(leavePay) * days / numberofdays)
              //    , (parseInt(UniformAllow) * days / numberofdays), (parseInt(PensionFund) * days / numberofdays), (parseInt(securityAllow) * days / numberofdays)
              //    , (parseInt(OtherAllow) * days / numberofdays), parseFloat(transitwage), parseFloat(otherEarnings), parseFloat(reimbursement));
              finalbal = Math.round(totalearning - totaldeduction);
              var leavewagescf = ((parseInt(leaveWagesBF) || 0) + (parseInt(leavePay) * days / numberofdays)).toFixed(2);
              $("#pLeaveWagesCf").val(leavewagescf);
              $("#ptotalpay").text(totalearning);
              $("#ptotaldeduc").text(totaldeduction);
              $("#pfinalbal").text(finalbal);
              $("#pTotalPayable").val(totalearning);
              $("#pTotalDeductions").val(totaldeduction);
              $("#pFinalBalance").val(finalbal);
              this.calculateportagededuction();
          }

          /* Its function to calculate the deduction  */
          function calculateportagededuction() {
              var leavewagesdeuction = (parseInt(leavePay) * days / numberofdays);
              if (currency == "NGN") {
                  ca = $("#pcashAdvance").val() || 0;
                  bs = $("#pbondedStores").val() || 0;
                  od = $("#potherDeductions").val() || 0;
                  midmonthallotment = $("#pmidmonthallotment").val() || 0;
                  allotment = parseFloat($("#pallotments").val() || 0) + parseFloat($("#pallotment2").val() || 0);
                  totaldeduction = Math.round((parseFloat(ca) + parseFloat(midmonthallotment) + parseFloat(bs) + parseFloat(od) + parseFloat(nigpfAmount) + leavewagesdeuction + parseFloat(allotment) + (parseFloat(totalearning) * UDdeduction / 100) + (parseFloat(totalearning) * WFdeduction / 100) + (parseFloat(totalearning) * WHTdeduction / 100)));
                /*  console.log(parseFloat(ca), parseFloat(midmonthallotment), parseFloat(bs), parseFloat(od), parseFloat(nigpfAmount), leavewagesdeuction, parseFloat(allotment), (parseFloat(totalearning) * UDdeduction / 100), (parseFloat(totalearning) * WFdeduction / 100), (parseFloat(totalearning) * WHTdeduction / 100));*/

                  udAmount = (parseFloat(totalearning) * UDdeduction / 100);
                  wfAmount = (parseFloat(totalearning) * WFdeduction / 100);
                  tax = (parseFloat(totalearning) * WHTdeduction / 100);
                  $("#pwfAmount").val(wfAmount);
                  $("#pudAmount").val(udAmount);
                  $("#ptax").val(tax);
              }
              else {
                  $("#pwfAmount").val(0);
                  $("#pudAmount").val(0);
                  $("#ptax").val(0);
                  ca = $("#pcashAdvance").val() || 0;
                  bs = $("#pbondedStores").val() || 0;
                  od = $("#potherDeductions").val() || 0;
                  midmonthallotment = $("#pmidmonthallotment").val() || 0;
                  allotment = parseFloat($("#pallotments").val() || 0) + parseFloat($("#pallotment2").val() || 0);
                  totaldeduction = Math.round(parseFloat(ca) + parseFloat(midmonthallotment) + parseFloat(bs) + parseFloat(od) + parseFloat(allotment) + parseFloat(authorityDeduction) + leavewagesdeuction);
              }
              finalbal = Math.round(totalearning - totaldeduction);
              $("#ptotalpay").text(totalearning);
              $("#ptotaldeduc").text(totaldeduction);
              $("#pfinalbal").text(finalbal);
              $("#pTotalPayable").val(totalearning);
              $("#pTotalDeductions").val(totaldeduction);
              $("#pFinalBalance").val(finalbal);
          }



          /* function to downlaod the salary slip */
          function DownloadSalarySlip(e) {
              vesselids = $("#vesselid").val();
              years = $("#year").val();
              months = $("#month").val();
                $.ajax({
                 type: "POST",
                    url: '@Url.Action("VesselPayslip", "Portagebill")',
                    data: { 'vesselId': vesselids, 'month': months, 'year': years },
                // contentType: "application/json; charset=utf-8",
                  dataType: "json",
                                       }).done(function (data) {
                                           if (data.fileName != "") {
                                               window.location.href = "@Url.RouteUrl(new { Controller = "Home", Action = "DownloadXL" })/?fileName=" + data.fileName;
                                               alert("SalarySlip succesfully Download")
                                           }
                                       });
          }


          function downloadbow() {
                $.ajax({
                 type: "POST",
                    url: '@Url.Action("generateBowPDF", "Portagebill")',
                    data: { 'crewId': sessionStorage.getItem("crewid"), 'crewListId': sessionStorage.getItem("CrewListId"), 'signOffDate': $("#signOffdate").val(), 'currency': $("#currency").text()},
                // contentType: "application/json; charset=utf-8",
                  dataType: "json",
                                       }).done(function (data) {
                                           if (data.fileName != "") {
                                               window.location.href = "@Url.RouteUrl(new { Controller = "Home", Action = "DownloadXL" })/?fileName=" + data.fileName;
                                               alert("SalarySlip succesfully Download")
                                           }
                                       });
          }
          /* function Lock Portage Bill */
          function Lockpb() {
               vesselids = $("#vesselid").val();
              years = $("#year").val();
              months = $("#month").val();
                $.ajax({
                 type: "POST",
                    url: '@Url.Action("LockPortageBill", "Portagebill")',
                    data: { 'vesselId': vesselids, 'month': months, 'year': years },
                    dataType: "json",
                }).done(function (data) {
                    if (data.portageBillData == 0) {
                        alert("Selected Month PortageBill Null")
                    }
                    // else if (data.portageBillVM.length != data.portageBillData.length && data.portageBillData != 0 && data.portageBillVM.length >= data.portageBillData.length) {
                    //     alert("Portage Bill is not for selected a Selected Month")
                    // }
                    //else if (data.portageBillVM.length <= data.portageBillData.length) {
                  else if (data.portageBillData.length > 0) {
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("UpdateBillStatus", "Portagebill")',
                            data: { 'vesselId': vesselids, 'month': months, 'year': years },
                        })
                        if (data.updatePortageBill != 0) {
                            alert("PortageBill Status Sucessfuly Locked");
                            location.reload(true);
                        }
                    }
                });
          }
</script>

<script>
    $(function () {
        debugger;
        var currentYear = new Date().getFullYear();
        var currentMonth = new Date().getMonth();
        var cascadedDropDownMonthId = "#month";


        if (currentMonth >= 3) {
            for (var i = currentYear; i > currentYear - 1; i--) {
                $("#year").append('<option value="' + i.toString() + '">' + i.toString() + '</option>');
            }
        }
        else if(currentMonth == 0)
        {
            var lastmonth = currentYear-1;
            for (var i = lastmonth; i <= currentYear; i++) {
                $("#year").append('<option value="' + i.toString() + '">' + i.toString() + '</option>');
            }
        }
        else {
            for (var i = currentYear; i > currentYear - 1; i--) {
                $("#year").append('<option value="' + i.toString() + '">' + i.toString() + '</option>');
            }
        }

        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];


        if (sessionStorage.getItem('selectedYear') != null) {
            var currentSelectedYear = sessionStorage.getItem('selectedYear');
            $('select[name^="year"] option[value=' + currentSelectedYear + ']').attr("selected", "selected");
            if (currentMonth >= 3) {
                for (var month = currentMonth; month > currentMonth - 3; month--) {
                    $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');
                }
            }
            else if (currentMonth == 0) {
                $(cascadedDropDownMonthId).append('<option value="' + (10 + 1) + '">' + monthNames[10] + '</option>');
                $(cascadedDropDownMonthId).append('<option value="' + (11 + 1) + '">' + monthNames[11] + '</option>');
                $(cascadedDropDownMonthId).append('<option value="' + (0 + 1) + '">' + monthNames[0] + '</option>');
            }
            else if (currentMonth <= 2) {
                if (currentSelectedYear == currentYear) {
                    for (var month = currentMonth; month > -1; month--) {
                        $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');
                    }
                }
                else {
                    for (var month = 12; month > 12 - currentMonth; month--) {
                        $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');

                    }
                }

            }
            //sessionStorage.setItem('selectedYear');
        }

        if (sessionStorage.getItem('selectedMonth') != null) {
            var CurrentSelectedMonth = sessionStorage.getItem('selectedMonth');
            $('select[name^="month"] option[value=' + CurrentSelectedMonth + ']').attr("selected", "selected");
            //sessionStorage.setItem('selectedMonth');

        }

        $("#year").on('change', function () {
            debugger;
            $(cascadedDropDownMonthId).empty();
            sessionStorage.setItem('selectedYear', parseInt($(this).val()));
            if (currentMonth >= 3) {
                for (var month = currentMonth; month > currentMonth - 3; month--) {
                    $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');
                }
            }
            else if (currentMonth == 0) {
                $(cascadedDropDownMonthId).append('<option value="' + (10 + 1) + '">' + monthNames[10 ] + '</option>');
               $(cascadedDropDownMonthId).append('<option value="' + (11+1) + '">' + monthNames[11] + '</option>');
                $(cascadedDropDownMonthId).append('<option value="' + (0+1) + '">' + monthNames[0] + '</option>');
            }
            else if (currentMonth <= 2) {
                var currentSelectedYear = parseInt($(this).val());
                if (currentSelectedYear == currentYear) {
                    for (var month = currentMonth; month > -1; month--) {
                        $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');
                    }
                }
                else {
                    for (var month = 12; month > 12 - currentMonth; month--) {
                        $(cascadedDropDownMonthId).append('<option value="' + (month + 1) + '">' + monthNames[month] + '</option>');
                    }
                }
            }
        });
        $("#month").on('change', function () {
            sessionStorage.setItem('selectedMonth', parseInt($(this).val()));
        });
    });
    //$(document).ready(function () {
    //    debugger
    //    $("#abcdefghi").on("click", function () {
    //        var yearDrop = $('#year').val();
    //        var monthDrop = $('#month').val();


    //        if (yearDrop.val == 0 && monthDrop.val == 0) {
    //            alert('Your Message');
    //        }
    //    });
    //});
</script>
@*<script>

        function showMon(val) {
            sessionStorage.setItem('SelectedItem', val);
            var selMovType = document.getElementById('#month');
            var selectedItem = sessionStorage.getItem('SelectedItem');
            var selectedItem = sessionStorage.getItem('month');
            if (selectedItem) {
                selMovType.value = selectedItem;
            }
        }

        function showYer(val) {
            sessionStorage.setItem('SelectedItem', val);
            var selMovType = document.getElementById('#year');
            var selectedItem = sessionStorage.getItem('SelectedItem');
            var selectedItem = sessionStorage.getItem('year');
            if (selectedItem) {
                selMovType.value = selectedItem;
            }
        }
    </script>*@
